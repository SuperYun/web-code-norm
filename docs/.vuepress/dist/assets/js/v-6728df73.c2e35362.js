"use strict";(self.webpackChunkweb_code_norm=self.webpackChunkweb_code_norm||[]).push([[152],{857:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6728df73",path:"/javascript.html",title:"JavaScript 风格指南",lang:"en-US",frontmatter:{title:"JavaScript 风格指南"},excerpt:"",headers:[{level:2,title:"目录",slug:"目录",children:[]},{level:2,title:"类型",slug:"类型",children:[]},{level:2,title:"引用",slug:"引用",children:[]},{level:2,title:"对象",slug:"对象",children:[]},{level:2,title:"数组",slug:"数组",children:[]},{level:2,title:"解构",slug:"解构",children:[]},{level:2,title:"字符串",slug:"字符串",children:[]},{level:2,title:"函数",slug:"函数",children:[]},{level:2,title:"箭头函数",slug:"箭头函数",children:[]},{level:2,title:"类与构造函数",slug:"类与构造函数",children:[]},{level:2,title:"模块",slug:"模块",children:[]},{level:2,title:"迭代器与生成器",slug:"迭代器与生成器",children:[]},{level:2,title:"属性",slug:"属性",children:[]},{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"提升",slug:"提升",children:[]},{level:2,title:"比较运算符与相等",slug:"比较运算符与相等",children:[]},{level:2,title:"块",slug:"块",children:[]},{level:2,title:"控制语句",slug:"控制语句",children:[]},{level:2,title:"注释",slug:"注释",children:[]},{level:2,title:"空格",slug:"空格",children:[]},{level:2,title:"逗号",slug:"逗号",children:[]},{level:2,title:"分号",slug:"分号",children:[]},{level:2,title:"类型转换与强制转换",slug:"类型转换与强制转换",children:[]},{level:2,title:"命名规范",slug:"命名规范",children:[]},{level:2,title:"Get-Set 访问器",slug:"get-set-访问器",children:[]},{level:2,title:"事件",slug:"事件",children:[]},{level:2,title:"jQuery",slug:"jquery",children:[]}],filePathRelative:"javascript.md",git:{}}},346:(n,s,a)=>{a.r(s),a.d(s,{default:()=>ob});var p=a(252);const e=(0,p.uE)('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ol><li><a href="#%E7%B1%BB%E5%9E%8B">类型</a></li><li><a href="#%E5%BC%95%E7%94%A8">引用</a></li><li><a href="#%E5%AF%B9%E8%B1%A1">对象</a></li><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E8%A7%A3%E6%9E%84">解构</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a></li><li><a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a></li><li><a href="#%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类与构造函数</a></li><li><a href="#%E6%A8%A1%E5%9D%97">模块</a></li><li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8">迭代器与生成器</a></li><li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li><li><a href="#%E5%8F%98%E9%87%8F">变量</a></li><li><a href="#%E6%8F%90%E5%8D%87">提升</a></li><li><a href="#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E7%9B%B8%E7%AD%89">比较运算符与相等</a></li><li><a href="#%E5%9D%97">块</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5">控制语句</a></li><li><a href="#%E6%B3%A8%E9%87%8A">注释</a></li><li><a href="#%E7%A9%BA%E6%A0%BC">空格</a></li><li><a href="#%E9%80%97%E5%8F%B7">逗号</a></li><li><a href="#%E5%88%86%E5%8F%B7">分号</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2">类型转换与强制转换</a></li><li><a href="#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83">命名规范</a></li><li><a href="#get-set-%E8%AE%BF%E9%97%AE%E5%99%A8">Get-Set 访问器</a></li><li><a href="#%E4%BA%8B%E4%BB%B6">事件</a></li><li><a href="#jquery">jQuery</a></li></ol><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p><a name="1.1"></a><a name="types--primitives"></a></p><ul><li><p><a href="#types--primitives">1.1</a> 基本类型: 你可以直接获取到基本类型的值</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code></li><li><code>bigint</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 1, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>由于 Symbols 和 BigInts 不能被正确的 polyfill。所以不应在不能原生支持这些类型的环境或浏览器中使用他们。</li></ul></li></ul><p><a name="1.2"></a><a name="types--complex"></a></p><ul><li><p><a href="#types--complex">1.2</a> 复杂类型: 复杂类型赋值是获取到他的引用的值。</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 9, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 回到顶部</a></strong></p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p><a name="2.1"></a><a name="references--prefer-const"></a></p>',10),t=(0,p._)("a",{href:"#references--prefer-const"},"2.1",-1),o=(0,p.Uk)(" 所有的赋值都用 "),c=(0,p._)("code",null,"const",-1),l=(0,p.Uk)("，避免使用 "),u=(0,p._)("code",null,"var",-1),r=(0,p.Uk)("。eslint: "),i={href:"http://eslint.org/docs/rules/prefer-const.html",target:"_blank",rel:"noopener noreferrer"},k=(0,p._)("code",null,"prefer-const",-1),b=(0,p.Uk)(", "),m={href:"http://eslint.org/docs/rules/no-const-assign.html",target:"_blank",rel:"noopener noreferrer"},d=(0,p._)("code",null,"no-const-assign",-1),g=(0,p.uE)('<blockquote><p>为什么？因为这个能确保你不会改变你的初始值，重复引用会导致 bug 并且使代码变得难以理解。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),f=(0,p._)("p",null,[(0,p._)("a",{name:"2.2"}),(0,p._)("a",{name:"references--disallow-var"})],-1),y=(0,p._)("a",{href:"#references--disallow-var"},"2.2",-1),h=(0,p.Uk)(" 如果你一定要对参数重新赋值，使用 "),v=(0,p._)("code",null,"let",-1),w=(0,p.Uk)("，而不是 "),_=(0,p._)("code",null,"var",-1),j=(0,p.Uk)("。eslint: "),x={href:"http://eslint.org/docs/rules/no-var.html",target:"_blank",rel:"noopener noreferrer"},E=(0,p._)("code",null,"no-var",-1),U=(0,p.uE)('<blockquote><p>为什么？因为 <code>let</code> 是块级作用域，而 <code>var</code> 是函数级作用域。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good, use the let.</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),q=(0,p.uE)('<p><a name="2.3"></a><a name="references--block-scope"></a></p><ul><li><p><a href="#references--block-scope">2.3</a> 注意：<code>let</code> 和 <code>const</code> 都是块级作用域。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// const 和 let 都只存在于它被定义的那个块级作用域。</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p><a name="3.1"></a><a name="objects--no-new"></a></p>',5),A=(0,p._)("a",{href:"#objects--no-new"},"3.1",-1),B=(0,p.Uk)(" 使用字面值创建对象。eslint: "),S={href:"http://eslint.org/docs/rules/no-new-object.html",target:"_blank",rel:"noopener noreferrer"},W=(0,p._)("code",null,"no-new-object",-1),N=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),D=(0,p.uE)('<p><a name="3.2"></a><a name="es6-computed-properties"></a></p><ul><li><p><a href="#es6-computed-properties">3.2</a> 使用计算属性名创建一个带有动态属性名的对象。</p><blockquote><p>为什么？因为这可以使你在同一个地方定义所有对象属性。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a key named </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><p><a name="3.3"></a><a name="es6-object-shorthand"></a></p>',3),C=(0,p._)("a",{href:"#es6-object-shorthand"},"3.3",-1),O=(0,p.Uk)(" 用对象方法简写。eslint: "),I={href:"http://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"},P=(0,p._)("code",null,"object-shorthand",-1),T=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">addValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 对象的方法</span>\n  <span class="token function">addValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',1),z=(0,p._)("p",null,[(0,p._)("a",{name:"3.4"}),(0,p._)("a",{name:"es6-object-concise"})],-1),F=(0,p._)("a",{href:"#es6-object-concise"},"3.4",-1),L=(0,p.Uk)(" 用属性值缩写。eslint: "),$={href:"http://eslint.org/docs/rules/object-shorthand.html",target:"_blank",rel:"noopener noreferrer"},J=(0,p._)("code",null,"object-shorthand",-1),G=(0,p.uE)('<blockquote><p>为什么？因为这样写的更少且可读性更高。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">&#39;Luke Skywalker&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token operator">:</span> lukeSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),R=(0,p.uE)('<p><a name="3.5"></a><a name="objects--grouped-shorthand"></a></p><ul><li><p><a href="#objects--grouped-shorthand">3.5</a> 将你的所有缩写放在对象声明的前面。</p><blockquote><p>为什么？因为这样能更方便地知道有哪些属性用了缩写。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> anakinSkywalker <span class="token operator">=</span> <span class="token string">&#39;Anakin Skywalker&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">&#39;Luke Skywalker&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  episodeOne<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  twoJediWalkIntoACantina<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n  episodeThree<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  mayTheFourth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  anakinSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n  anakinSkywalker<span class="token punctuation">,</span>\n  episodeOne<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  twoJediWalkIntoACantina<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  episodeThree<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  mayTheFourth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul><p><a name="3.6"></a><a name="objects--quoted-props"></a></p>',3),H=(0,p._)("a",{href:"#objects--quoted-props"},"3.6",-1),M=(0,p.Uk)(" 只对那些无效的标示使用引号 "),V=(0,p._)("code",null,"''",-1),Q=(0,p.Uk)("。eslint: "),Y={href:"http://eslint.org/docs/rules/quote-props.html",target:"_blank",rel:"noopener noreferrer"},X=(0,p._)("code",null,"quote-props",-1),K=(0,p.uE)('<blockquote><p>为什么？通常我们认为这种方式主观上更易读。不仅优化了代码高亮，而且也更容易被许多 JS 引擎优化。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',2),Z=(0,p.uE)('<p><a name="3.7"></a><a name="objects--prototype-builtins"></a></p><ul><li><p><a href="#objects--prototype-builtins">3.7</a> 不要直接调用 <code>Object.prototype</code>上的方法，如 <code>hasOwnProperty</code>、<code>propertyIsEnumerable</code>、<code>isPrototypeOf</code>。</p><blockquote><p>为什么？在一些有问题的对象上，这些方法可能会被屏蔽掉，如：<code>{ hasOwnProperty: false }</code> 或空对象 <code>Object.create(null)</code></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> has <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span> <span class="token comment">// 在模块作用域内做一次缓存。</span>\n<span class="token comment">/* or */</span>\n<span class="token keyword">import</span> has <span class="token keyword">from</span> <span class="token string">&#39;has&#39;</span><span class="token punctuation">;</span> <span class="token comment">// https://www.npmjs.com/package/has</span>\n<span class="token comment">// ...</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><p><a name="3.8"></a><a name="objects--rest-spread"></a></p>',3),nn=(0,p._)("a",{href:"#objects--rest-spread"},"3.8",-1),sn=(0,p.Uk)(" 对象浅拷贝时，更推荐使用扩展运算符（即 "),an=(0,p._)("code",null,"...",-1),pn=(0,p.Uk)(" 运算符），而不是 "),en={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},tn=(0,p._)("code",null,"Object.assign",-1),on=(0,p.Uk)("。获取对象指定的几个属性时，用对象的 rest 解构运算符（即 "),cn=(0,p._)("code",null,"...",-1),ln=(0,p.Uk)(" 运算符）更好。eslint: "),un={href:"https://eslint.org/docs/rules/prefer-object-spread",target:"_blank",rel:"noopener noreferrer"},rn=(0,p._)("code",null,"prefer-object-spread",-1),kn=(0,p._)("ul",null,[(0,p._)("li",null,"这一段不太好翻译出来， 大家看下面的例子就懂了。^.^")],-1),bn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// very bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this mutates `original` ಠ_ಠ</span>\n<span class="token keyword">delete</span> copy<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// so does this</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token comment">// good es6 扩展运算符 ...</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 浅拷贝</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>original<span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token comment">// rest 解构运算符</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>noA <span class="token punctuation">}</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span> <span class="token comment">// noA =&gt; { b: 2, c: 3 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p><a name="4.1"></a><a name="arrays--literals"></a></p>',4),mn=(0,p._)("a",{href:"#arrays--literals"},"4.1",-1),dn=(0,p.Uk)(" 用字面量创建数组。eslint: "),gn={href:"http://eslint.org/docs/rules/no-array-constructor.html",target:"_blank",rel:"noopener noreferrer"},fn=(0,p._)("code",null,"no-array-constructor",-1),yn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),hn=(0,p._)("p",null,[(0,p._)("a",{name:"4.2"}),(0,p._)("a",{name:"arrays--push"})],-1),vn=(0,p._)("a",{href:"#arrays--push"},"4.2",-1),wn=(0,p.Uk)(" 用 "),_n={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},jn=(0,p.Uk)("Array#push"),xn=(0,p.Uk)(" 代替直接向数组中添加一个值。"),En=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> someStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\nsomeStack<span class="token punctuation">[</span>someStack<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nsomeStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Un=(0,p.uE)('<p><a name="4.3"></a><a name="es6-array-spreads"></a></p><ul><li><p><a href="#es6-array-spreads">4.3</a> 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  itemsCopy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><p><a name="4.4"></a><a name="arrays--from-iterable"></a></p>',3),qn=(0,p._)("a",{href:"#arrays--from-iterable"},"4.4",-1),An=(0,p.Uk)(" 用 "),Bn=(0,p._)("code",null,"...",-1),Sn=(0,p.Uk)(" 运算符而不是 "),Wn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},Nn=(0,p._)("code",null,"Array.from",-1),Dn=(0,p.Uk)(" 来将一个可迭代的对象转换成数组。"),Cn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),On=(0,p._)("p",null,[(0,p._)("a",{name:"4.5"}),(0,p._)("a",{name:"arrays--from-array-like"})],-1),In=(0,p._)("a",{href:"#arrays--from-array-like"},"4.5",-1),Pn=(0,p.Uk)(" 用 "),Tn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},zn=(0,p._)("code",null,"Array.from",-1),Fn=(0,p.Uk)(" 将一个类数组对象转成一个数组。"),Ln=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),$n=(0,p._)("p",null,[(0,p._)("a",{name:"4.6"}),(0,p._)("a",{name:"arrays--mapping"})],-1),Jn=(0,p._)("a",{href:"#arrays--mapping"},"4.6",-1),Gn=(0,p.Uk)(" 用 "),Rn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},Hn=(0,p._)("code",null,"Array.from",-1),Mn=(0,p.Uk)(" 而不是 "),Vn=(0,p._)("code",null,"...",-1),Qn=(0,p.Uk)(" 运算符去做 map 遍历。 因为这样可以避免创建一个临时数组。"),Yn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Xn=(0,p._)("p",null,[(0,p._)("a",{name:"4.7"}),(0,p._)("a",{name:"arrays--callback-return"})],-1),Kn=(0,p._)("a",{href:"#arrays--callback-return"},"4.7",-1),Zn=(0,p.Uk)(" 在数组方法的回调函数中使用 return 语句。如果函数体由一条返回一个表达式的语句组成，并且这个表达式没有副作用， 这个时候可以忽略 return，详见 "),ns=(0,p._)("a",{href:"#arrows--implicit-return"},"8.2",-1),ss=(0,p.Uk)("。eslint: "),as={href:"http://eslint.org/docs/rules/array-callback-return",target:"_blank",rel:"noopener noreferrer"},ps=(0,p._)("code",null,"array-callback-return",-1),es=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good 函数只有一个语句</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - 没有返回值， 因为在第一次迭代后 acc 就变成 undefined 了</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  acc<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> flatten<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  acc<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> flatten<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> flatten<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',1),ts=(0,p.uE)('<p><a name="4.8"></a><a name="arrays--bracket-newline"></a></p><ul><li><p><a href="#arrays--bracket-newline">4.8</a> 如果一个数组有很多行，在数组的 <code>[</code> 后和 <code>]</code> 前断行。请看下面示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="解构" tabindex="-1"><a class="header-anchor" href="#解构" aria-hidden="true">#</a> 解构</h2><p><a name="5.1"></a><a name="destructuring--object"></a></p>',5),os=(0,p._)("a",{href:"#destructuring--object"},"5.1",-1),cs=(0,p.Uk)(" 用对象的解构赋值来获取和使用对象某个或多个属性值。eslint: "),ls={href:"https://eslint.org/docs/rules/prefer-destructuring",target:"_blank",rel:"noopener noreferrer"},us=(0,p._)("code",null,"prefer-destructuring",-1),rs=(0,p.uE)('<blockquote><p>为什么？解构使您不必为这些属性创建临时引用，并且避免重复引用对象。重复引用对象将造成代码重复、增加阅读次数、提高犯错概率。Destructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> firstName <span class="token operator">=</span> user<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> lastName <span class="token operator">=</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',2),is=(0,p._)("p",null,[(0,p._)("a",{name:"5.2"}),(0,p._)("a",{name:"destructuring--array"})],-1),ks=(0,p._)("a",{href:"#destructuring--array"},"5.2",-1),bs=(0,p.Uk)(" 用数组解构。eslint: "),ms={href:"https://eslint.org/docs/rules/prefer-destructuring",target:"_blank",rel:"noopener noreferrer"},ds=(0,p._)("code",null,"prefer-destructuring",-1),gs=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),fs=(0,p.uE)('<p><a name="5.3"></a><a name="destructuring--object-over-array"></a></p><ul><li><p><a href="#destructuring--object-over-array">5.3</a> 多个返回值用对象的解构，而不是数组解构。</p><blockquote><p>为什么？你可以在后期添加新的属性或者变换变量的顺序而不会破坏原有的引用。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 然后就是见证奇迹的时刻</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用者需要想一想返回值的顺序</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> __<span class="token punctuation">,</span> top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">processInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// oops，奇迹又发生了</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 调用者只需要选择他想用的值就好了</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> top <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ back to top</a></strong></p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p><a name="6.1"></a><a name="strings--quotes"></a></p>',5),ys=(0,p._)("a",{href:"#strings--quotes"},"6.1",-1),hs=(0,p.Uk)(" 字符串应使用单引号 "),vs=(0,p._)("code",null,"''",-1),ws=(0,p.Uk)(" 。eslint: "),_s={href:"https://eslint.org/docs/rules/quotes.html",target:"_blank",rel:"noopener noreferrer"},js=(0,p._)("code",null,"quotes",-1),xs=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Capt. Janeway&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - 模板字符串应该包含插入文字或换行</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Capt. Janeway</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Capt. Janeway&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),Es=(0,p.uE)('<p><a name="6.2"></a><a name="strings--line-length"></a></p><ul><li><p><a href="#strings--line-length">6.2</a> 超过 100 个字符的字符串不应该用字符串连接成多行。</p><blockquote><p>为什么？字符串折行增加编写难度且不易被搜索。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because &#39;</span> <span class="token operator">+</span>\n<span class="token string">&#39;of Batman. When you stop to think about how Batman had anything to do &#39;</span> <span class="token operator">+</span>\n<span class="token string">&#39;with this, you would get nowhere fast.&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><p><a name="6.3"></a><a name="es6-template-literals"></a></p>',3),Us=(0,p._)("a",{href:"#es6-template-literals"},"6.3",-1),qs=(0,p.Uk)(" 当需要动态生成字符串时，使用模板字符串而不是字符串拼接。eslint: "),As={href:"https://eslint.org/docs/rules/prefer-template.html",target:"_blank",rel:"noopener noreferrer"},Bs=(0,p._)("code",null,"prefer-template",-1),Ss=(0,p.Uk)(),Ws={href:"https://eslint.org/docs/rules/template-curly-spacing",target:"_blank",rel:"noopener noreferrer"},Ns=(0,p._)("code",null,"template-curly-spacing",-1),Ds=(0,p.uE)('<blockquote><p>为什么？模板字符串更具可读性、多行语法更简洁以及更方便插入变量到字符串里头。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;How are you, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;How are you, &#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">How are you, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">How are you, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',2),Cs=(0,p._)("p",null,[(0,p._)("a",{name:"6.4"}),(0,p._)("a",{name:"strings--eval"})],-1),Os=(0,p._)("a",{href:"#strings--eval"},"6.4",-1),Is=(0,p.Uk)(" 永远不要使用 "),Ps=(0,p._)("code",null,"eval()",-1),Ts=(0,p.Uk)("，该方法有太多漏洞。eslint: "),zs={href:"https://eslint.org/docs/rules/no-eval",target:"_blank",rel:"noopener noreferrer"},Fs=(0,p._)("code",null,"no-eval",-1),Ls=(0,p._)("p",null,[(0,p._)("a",{name:"6.5"}),(0,p._)("a",{name:"strings--escaping"})],-1),$s=(0,p._)("a",{href:"#strings--escaping"},"6.5",-1),Js=(0,p.Uk)(" 不要使用不必要的转义字符。eslint: "),Gs={href:"http://eslint.org/docs/rules/no-useless-escape",target:"_blank",rel:"noopener noreferrer"},Rs=(0,p._)("code",null,"no-useless-escape",-1),Hs=(0,p.uE)('<blockquote><p>为什么？反斜线可读性差，因此仅当必要时才使用它。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; \\i\\s \\&quot;quoted\\&quot;&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; is &quot;quoted&quot;&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//best</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',2),Ms=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p><a name="7.1"></a><a name="functions--iife"></a></p>',3),Vs=(0,p._)("a",{href:"#functions--iife"},"7.1",-1),Qs=(0,p.Uk)(" 把立即执行函数包裹在圆括号里。eslint: "),Ys={href:"http://eslint.org/docs/rules/wrap-iife.html",target:"_blank",rel:"noopener noreferrer"},Xs=(0,p._)("code",null,"wrap-iife",-1),Ks=(0,p.uE)('<blockquote><p>立即执行函数：Immediately Invoked Function expression = IIFE。 为什么？一个立即调用的函数表达式是一个单元 - 把它和它的调用者（圆括号）包裹起来，使代码读起来更清晰。 另外，在模块化世界里，你几乎用不着 IIFE。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// immediately-invoked function expression (IIFE)</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),Zs=(0,p._)("p",null,[(0,p._)("a",{name:"7.2"}),(0,p._)("a",{name:"functions--in-blocks"})],-1),na=(0,p._)("a",{href:"#functions--in-blocks"},"7.2",-1),sa=(0,p.Uk)(" 不要在非函数块（"),aa=(0,p._)("code",null,"if",-1),pa=(0,p.Uk)("、"),ea=(0,p._)("code",null,"while",-1),ta=(0,p.Uk)(" 等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但不同浏览器的解析方式不同，这是一个坏消息。eslint: "),oa={href:"http://eslint.org/docs/rules/no-loop-func.html",target:"_blank",rel:"noopener noreferrer"},ca=(0,p._)("code",null,"no-loop-func",-1),la=(0,p.uE)('<p><a name="7.3"></a><a name="functions--note-on-blocks"></a></p><ul><li><p><a href="#functions--note-on-blocks">7.3</a> **注意：**ECMA-262 中对块（<code>block</code>）的定义是： 一系列的语句。但是函数声明不是一个语句， 函数表达式是一个语句。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nope.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> test<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yup.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p><a name="7.4"></a><a name="functions--arguments-shadow"></a></p><ul><li><p><a href="#functions--arguments-shadow">7.4</a> 不要用 <code>arguments</code> 命名参数。他的优先级高于每个函数作用域自带的 <code>arguments</code> 对象，这会导致函数自带的 <code>arguments</code> 值被覆盖。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p><a name="7.5"></a><a name="es6-rest"></a></p>',5),ua=(0,p._)("a",{href:"#es6-rest"},"7.5",-1),ra=(0,p.Uk)(" 不要使用 "),ia=(0,p._)("code",null,"arguments",-1),ka=(0,p.Uk)("，用收集参数语法 "),ba=(0,p._)("code",null,"...",-1),ma=(0,p.Uk)(" 代替。eslint: "),da={href:"http://eslint.org/docs/rules/prefer-rest-params",target:"_blank",rel:"noopener noreferrer"},ga=(0,p._)("code",null,"prefer-rest-params",-1),fa=(0,p.uE)('<blockquote><p>为什么？<code>...</code> 明确你想用哪个参数。而且收集参数是真数组，而不是类似数组的 <code>arguments</code>。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',2),ya=(0,p.uE)('<p><a name="7.6"></a><a name="es6-default-parameters"></a></p><ul><li><p><a href="#es6-default-parameters">7.6</a> 用默认参数语法而不是在函数里对参数重新赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// really bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 不！我们不该修改 arguments</span>\n  <span class="token comment">// 第二：如果 opts 的值为 false, 它会被赋值为 {}</span>\n  <span class="token comment">// 虽然你想这么写，但是这个会带来一些微妙的 bug。</span>\n  opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li></ul><p><a name="7.7"></a><a name="functions--default-side-effects"></a></p><ul><li><p><a href="#functions--default-side-effects">7.7</a> 避免默认参数的副作用。</p><blockquote><p>为什么？他会令人迷惑不解，比如下面这个，a 到底等于几，这个需要想一下。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> b<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p><a name="7.8"></a><a name="functions--defaults-last"></a></p>',5),ha=(0,p._)("a",{href:"#functions--defaults-last"},"7.8",-1),va=(0,p.Uk)(" 把默认参数赋值放在最后。eslint: "),wa={href:"https://eslint.org/docs/rules/default-param-last",target:"_blank",rel:"noopener noreferrer"},_a=(0,p._)("code",null,"default-param-last",-1),ja=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),xa=(0,p._)("p",null,[(0,p._)("a",{name:"7.9"}),(0,p._)("a",{name:"functions--constructor"})],-1),Ea=(0,p._)("a",{href:"#functions--constructor"},"7.9",-1),Ua=(0,p.Uk)(" 不要用函数构造器创建函数。eslint: "),qa={href:"http://eslint.org/docs/rules/no-new-func",target:"_blank",rel:"noopener noreferrer"},Aa=(0,p._)("code",null,"no-new-func",-1),Ba=(0,p.uE)('<blockquote><p>为什么？以这种方式创建函数将类似于字符串 eval()，存在漏洞。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">var</span> subtract <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a - b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),Sa=(0,p._)("p",null,[(0,p._)("a",{name:"7.10"}),(0,p._)("a",{name:"functions--signature-spacing"})],-1),Wa=(0,p._)("a",{href:"#functions--signature-spacing"},"7.10",-1),Na=(0,p.Uk)(" 函数定义部分要有空格。eslint: "),Da={href:"http://eslint.org/docs/rules/space-before-function-paren",target:"_blank",rel:"noopener noreferrer"},Ca=(0,p._)("code",null,"space-before-function-paren",-1),Oa=(0,p.Uk)(),Ia={href:"http://eslint.org/docs/rules/space-before-blocks",target:"_blank",rel:"noopener noreferrer"},Pa=(0,p._)("code",null,"space-before-blocks",-1),Ta=(0,p.uE)('<blockquote><p>为什么？统一性好，而且在你添加/删除一个名字的时候不需要添加/删除空格。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">h</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',2),za=(0,p._)("p",null,[(0,p._)("a",{name:"7.11"}),(0,p._)("a",{name:"functions--mutate-params"})],-1),Fa=(0,p._)("a",{href:"#functions--mutate-params"},"7.11",-1),La=(0,p.Uk)(" 不要修改参数. eslint: "),$a={href:"http://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"},Ja=(0,p._)("code",null,"no-param-reassign",-1),Ga=(0,p.uE)('<blockquote><p>为什么？操作参数对象对原始调用者会导致意想不到的副作用。就是不要改参数的数据结构，保留参数原始值和数据结构。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  obj<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>key <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2),Ra=(0,p._)("p",null,[(0,p._)("a",{name:"7.12"}),(0,p._)("a",{name:"functions--reassign-params"})],-1),Ha=(0,p._)("a",{href:"#functions--reassign-params"},"7.12",-1),Ma=(0,p.Uk)(" 不要对参数重新赋值。eslint: "),Va={href:"http://eslint.org/docs/rules/no-param-reassign.html",target:"_blank",rel:"noopener noreferrer"},Qa=(0,p._)("code",null,"no-param-reassign",-1),Ya=(0,p.uE)('<blockquote><p>为什么？参数重新赋值会导致意外行为，尤其是对 <code>arguments</code>。这也会导致优化问题，特别是在 V8 引擎里。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',2),Xa=(0,p._)("p",null,[(0,p._)("a",{name:"7.13"}),(0,p._)("a",{name:"functions--spread-vs-apply"})],-1),Ka=(0,p._)("a",{href:"#functions--spread-vs-apply"},"7.13",-1),Za=(0,p.Uk)(" 使用拓展运算符调用多参数的函数。eslint: "),np={href:"http://eslint.org/docs/rules/prefer-spread",target:"_blank",rel:"noopener noreferrer"},sp=(0,p._)("code",null,"prefer-spread",-1),ap=(0,p.uE)('<blockquote><p>为什么？这样更清晰，你不必提供上下文（即指定 this 值），而且你不能轻易地用 <code>apply</code> 来组成 <code>new</code>。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',2),pp=(0,p.uE)('<p><a name="7.14"></a><a name="functions--signature-invocation-indentation"></a></p><ul><li><p><a href="#functions--signature-invocation-indentation">7.14</a> 调用或者编写一个包含多个参数的函数的缩进，应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数，每行逗号结尾。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">bar<span class="token punctuation">,</span>\n             baz<span class="token punctuation">,</span>\n             quux</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good 缩进不要太过分</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>\n  <span class="token parameter">bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">,</span>\n  quux<span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span>\n  bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  foo<span class="token punctuation">,</span>\n  bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><p><a name="8.1"></a><a name="arrows--use-them"></a></p>',5),ep=(0,p._)("a",{href:"#arrows--use-them"},"8.1",-1),tp=(0,p.Uk)(" 当你一定要用函数表达式（在回调函数里）的时候，使用箭头函数。 eslint: "),op={href:"http://eslint.org/docs/rules/prefer-arrow-callback.html",target:"_blank",rel:"noopener noreferrer"},cp=(0,p._)("code",null,"prefer-arrow-callback",-1),lp=(0,p.Uk)(", "),up={href:"http://eslint.org/docs/rules/arrow-spacing.html",target:"_blank",rel:"noopener noreferrer"},rp=(0,p._)("code",null,"arrow-spacing",-1),ip=(0,p.uE)('<blockquote><p>为什么？箭头函数中的 <code>this</code> 与定义该函数的上下文中的 <code>this</code> 一致，这通常才是你想要的。而且箭头函数是更简洁的语法。</p></blockquote><blockquote><p>什么时候不用箭头函数：如果你的函数逻辑较复杂，你应该把它单独写入一个命名函数里头。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),kp=(0,p._)("p",null,[(0,p._)("a",{name:"8.2"}),(0,p._)("a",{name:"arrows--implicit-return"})],-1),bp=(0,p._)("a",{href:"#arrows--implicit-return"},"8.2",-1),mp=(0,p.Uk)(" 如果函数体由一个没有副作用的 "),dp={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions",target:"_blank",rel:"noopener noreferrer"},gp=(0,p.Uk)("表达式"),fp=(0,p.Uk)(" 语句组成，删除大括号和 return。否则，使用大括号和 "),yp=(0,p._)("code",null,"return",-1),hp=(0,p.Uk)(" 语句。 eslint: "),vp={href:"https://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"},wp=(0,p._)("code",null,"arrow-parens",-1),_p=(0,p.Uk)(", "),jp={href:"https://eslint.org/docs/rules/arrow-body-style.html",target:"_blank",rel:"noopener noreferrer"},xp=(0,p._)("code",null,"arrow-body-style",-1),Ep=(0,p.uE)('<blockquote><p>为什么？语法糖，当多个函数链在一起的时候好读。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 没有明显的 return 语句，可能存在副作用。</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当 callback 返回 true 时...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>',2),Up=(0,p.uE)('<p><a name="8.3"></a><a name="arrows--paren-wrap"></a></p><ul><li><p><a href="#arrows--paren-wrap">8.3</a> 如果表达式涉及多行，把他包裹在圆括号里以提高可读性。</p><blockquote><p>为什么？这样能清晰地显示函数的开始位置和结束位置。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p><a name="8.4"></a><a name="arrows--one-arg-parens"></a></p>',3),qp=(0,p._)("a",{href:"#arrows--one-arg-parens"},"8.4",-1),Ap=(0,p.Uk)(" 在箭头函数参数两头，总是使用小括号包裹住参数，这样做使代码更清晰且一致. eslint: "),Bp={href:"https://eslint.org/docs/rules/arrow-parens.html",target:"_blank",rel:"noopener noreferrer"},Sp=(0,p._)("code",null,"arrow-parens",-1),Wp=(0,p.uE)('<blockquote><p>为什么？当你想要添加或删除参数时能比较省事。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A long string with the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. It’s so long that we don’t want it to take up space on the .map line!</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A long string with the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. It’s so long that we don’t want it to take up space on the .map line!</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',2),Np=(0,p._)("p",null,[(0,p._)("a",{name:"8.5"}),(0,p._)("a",{name:"arrows--confusing"})],-1),Dp=(0,p._)("a",{href:"#arrows--confusing"},"8.5",-1),Cp=(0,p.Uk)(" 避免箭头函数（"),Op=(0,p._)("code",null,"=>",-1),Ip=(0,p.Uk)("）和比较操作符（"),Pp=(0,p._)("code",null,"<=",-1),Tp=(0,p.Uk)(", "),zp=(0,p._)("code",null,">=",-1),Fp=(0,p.Uk)("）混淆. eslint: "),Lp={href:"http://eslint.org/docs/rules/no-confusing-arrow",target:"_blank",rel:"noopener noreferrer"},$p=(0,p._)("code",null,"no-confusing-arrow",-1),Jp=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>height <span class="token operator">&gt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> height<span class="token punctuation">,</span> largeSize<span class="token punctuation">,</span> smallSize <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> largeSize <span class="token operator">:</span> smallSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),Gp=(0,p._)("p",null,[(0,p._)("a",{name:"8.6"}),(0,p._)("a",{name:"whitespace--implicit-arrow-linebreak"})],-1),Rp=(0,p._)("a",{href:"#whitespace--implicit-arrow-linebreak"},"8.6",-1),Hp=(0,p.Uk)(" 使箭头函数体有一个清晰的返回。 eslint: "),Mp={href:"https://eslint.org/docs/rules/implicit-arrow-linebreak",target:"_blank",rel:"noopener noreferrer"},Vp=(0,p._)("code",null,"implicit-arrow-linebreak",-1),Qp=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  bar<span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n   bar\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',1),Yp=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="类与构造函数" tabindex="-1"><a class="header-anchor" href="#类与构造函数" aria-hidden="true">#</a> 类与构造函数</h2><p><a name="9.1"></a><a name="constructors--use-class"></a></p><ul><li><p><a href="#constructors--use-class">9.1</a> 使用 <code>class</code> 语法。避免直接操作 <code>prototype</code>。</p><blockquote><p>为什么？<code>class</code> 语法更简洁更易理解。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>contents<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>contents<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul><p><a name="9.2"></a><a name="constructors--extends"></a></p><ul><li><p><a href="#constructors--extends">9.2</a> 用 <code>extends</code> 实现继承。</p><blockquote><p>为什么？它是一种内置的方法来继承原型功能而不破坏 <code>instanceof</code>。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> inherits <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inherits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">PeekableQueue</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Queue</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">inherits</span><span class="token punctuation">(</span>PeekableQueue<span class="token punctuation">,</span> Queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">PeekableQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">PeekableQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><p><a name="9.3"></a><a name="constructors--chaining"></a></p><ul><li><p><a href="#constructors--chaining">9.3</a> 方法可以返回 <code>this</code> 来实现链式调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token class-name">Jedi</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">jump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>jumping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Jedi</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nluke<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; true</span>\nluke<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>jumping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nluke<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li></ul><p><a name="9.4"></a><a name="constructors--tostring"></a></p><ul><li><p><a href="#constructors--tostring">9.4</a> 自己写 <code>toString()</code> 方法是可以的，但需要保证它可以正常工作且没有副作用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&#39;no name&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Jedi - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><p><a name="9.5"></a><a name="constructors--no-useless"></a></p>',11),Xp=(0,p._)("a",{href:"#constructors--no-useless"},"9.5",-1),Kp=(0,p.Uk)(" 如果没有特别定义，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint: "),Zp={href:"http://eslint.org/docs/rules/no-useless-constructor",target:"_blank",rel:"noopener noreferrer"},ne=(0,p._)("code",null,"no-useless-constructor",-1),se=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这种构造函数是不需要写的</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rey&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',1),ae=(0,p._)("p",null,[(0,p._)("a",{name:"9.6"}),(0,p._)("a",{name:"classes--no-duplicate-members"})],-1),pe=(0,p._)("a",{href:"#classes--no-duplicate-members"},"9.6",-1),ee=(0,p.Uk)(" 避免重复定义类成员。eslint: "),te={href:"http://eslint.org/docs/rules/no-dupe-class-members",target:"_blank",rel:"noopener noreferrer"},oe=(0,p._)("code",null,"no-dupe-class-members",-1),ce=(0,p.uE)('<blockquote><p>为什么？重复定义类成员只会使用最后一个被定义的 —— 重复本身也是一个 bug.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',2),le=(0,p._)("p",null,[(0,p._)("a",{name:"classes--methods-use-this"})],-1),ue=(0,p._)("a",{href:"#classes--methods-use-this"},"9.7",-1),re=(0,p.Uk)(" 除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用 "),ie=(0,p._)("code",null,"this",-1),ke=(0,p.Uk)(" 或被写成静态方法。 作为一个实例方法表明它应该根据实例的属性有不同的行为。eslint: "),be={href:"https://eslint.org/docs/rules/class-methods-use-this",target:"_blank",rel:"noopener noreferrer"},me=(0,p._)("code",null,"class-methods-use-this",-1),de=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - this 被使用了</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - constructor 不一定要使用 this</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - 静态方法不需要使用 this</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',1),ge=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p><a name="10.1"></a><a name="modules--use-them"></a></p><ul><li><p><a href="#modules--use-them">10.1</a> 使用（<code>import</code>/<code>export</code>）模块而不是非标准的模块系统。你可以随时转到你喜欢的模块系统。</p><blockquote><p>为什么？模块化是未来，让我们现在就开启未来吧。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> AirbnbStyleGuide <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AirbnbStyleGuide<span class="token punctuation">.</span>es6<span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token keyword">import</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> AirbnbStyleGuide<span class="token punctuation">.</span>es6<span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><p><a name="10.2"></a><a name="modules--no-wildcard"></a></p><ul><li><p><a href="#modules--no-wildcard">10.2</a> 不要用 <code>import</code> 通配符， 即 <code>*</code> 这种方式。</p><blockquote><p>为什么？这确保你有单个默认的导出。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><a name="10.3"></a><a name="modules--no-export-from-import"></a></p><ul><li><p><a href="#modules--no-export-from-import">10.3</a> 不要直接从 <code>import</code> 中直接 <code>export</code>。</p><blockquote><p>为什么？虽然只写一行很简洁，但是使用明确 <code>import</code> 和明确的 <code>export</code> 来保证一致性。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token comment">// filename es6.js</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> es6 <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// filename es6.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><a name="10.4"></a><a name="modules--no-duplicate-imports"></a></p>',9),fe=(0,p._)("a",{href:"#modules--no-duplicate-imports"},"10.4",-1),ye=(0,p.Uk)(" 一个路径只 "),he=(0,p._)("code",null,"import",-1),ve=(0,p.Uk)(" 一次。eslint: "),we={href:"http://eslint.org/docs/rules/no-duplicate-imports",target:"_blank",rel:"noopener noreferrer"},_e=(0,p._)("code",null,"no-duplicate-imports",-1),je=(0,p.uE)('<blockquote><p>为什么？多行导入同一路径将使代码变得难以维护。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// … 其他导入 … //</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  named1<span class="token punctuation">,</span>\n  named2<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',2),xe=(0,p._)("p",null,[(0,p._)("a",{name:"10.5"}),(0,p._)("a",{name:"modules--no-mutable-exports"})],-1),Ee=(0,p._)("a",{href:"#modules--no-mutable-exports"},"10.5",-1),Ue=(0,p.Uk)(" 不要导出可变的东西。eslint: "),qe={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md",target:"_blank",rel:"noopener noreferrer"},Ae=(0,p._)("code",null,"import/no-mutable-exports",-1),Be=(0,p.uE)('<blockquote><p>为什么？变化通常都是需要避免，特别是当你要输出可变的绑定。虽然在某些场景下可能需要这种技术，但总的来说应该导出常量。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),Se=(0,p._)("p",null,[(0,p._)("a",{name:"10.6"}),(0,p._)("a",{name:"modules--prefer-default-export"})],-1),We=(0,p._)("a",{href:"#modules--prefer-default-export"},"10.6",-1),Ne=(0,p.Uk)(" 在一个单一导出模块里，用 "),De=(0,p._)("code",null,"export default",-1),Ce=(0,p.Uk)(" 更好。eslint: "),Oe={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md",target:"_blank",rel:"noopener noreferrer"},Ie=(0,p._)("code",null,"import/prefer-default-export",-1),Pe=(0,p.uE)('<blockquote><p>为什么？鼓励使用更多文件，每个文件只导出一次，这样可读性和可维护性更好。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">// bad</span>\n    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n   <span class="token comment">// good</span>\n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><a name="10.7"></a><a name="modules--imports-first"></a></p>',3),Te=(0,p._)("a",{href:"#modules--imports-first"},"10.7",-1),ze=(0,p.Uk)(" 把 "),Fe=(0,p._)("code",null,"import",-1),Le=(0,p.Uk)(" 放在其他所有语句之前。eslint: "),$e={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md",target:"_blank",rel:"noopener noreferrer"},Je=(0,p._)("code",null,"import/first",-1),Ge=(0,p.uE)('<blockquote><p>为什么？因为 <code>import</code> 会被提升到代码最前面运行，因此将他们放在最前面以防止发生意外行为。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),Re=(0,p.uE)('<p><a name="10.8"></a><a name="modules--multiline-imports-over-newlines"></a></p><ul><li><p><a href="#modules--multiline-imports-over-newlines">10.8</a> 多行 <code>import</code> 应该缩进，就像多行数组和对象字面量一样。</p><blockquote><p>为什么？花括号与样式指南中每个其他花括号块遵循相同的缩进规则，逗号也是。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>longNameA<span class="token punctuation">,</span> longNameB<span class="token punctuation">,</span> longNameC<span class="token punctuation">,</span> longNameD<span class="token punctuation">,</span> longNameE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  longNameA<span class="token punctuation">,</span>\n  longNameB<span class="token punctuation">,</span>\n  longNameC<span class="token punctuation">,</span>\n  longNameD<span class="token punctuation">,</span>\n  longNameE<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><p><a name="10.9"></a><a name="modules--no-webpack-loader-syntax"></a></p>',3),He=(0,p._)("a",{href:"#modules--no-webpack-loader-syntax"},"10.9",-1),Me=(0,p.Uk)(" 在 "),Ve=(0,p._)("code",null,"import",-1),Qe=(0,p.Uk)(" 语句里不允许 Webpack loader 语法。eslint: "),Ye={href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md",target:"_blank",rel:"noopener noreferrer"},Xe=(0,p._)("code",null,"import/no-webpack-loader-syntax",-1),Ke=(0,p.uE)('<blockquote><p>为什么？一旦用 Webpack 语法在 import 里会把代码耦合到模块绑定器。最好是在 <code>webpack.config.js</code> 里写 webpack loader 语法</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;css!sass!foo.scss&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;style!css!bar.css&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;foo.scss&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;bar.css&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),Ze=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="迭代器与生成器" tabindex="-1"><a class="header-anchor" href="#迭代器与生成器" aria-hidden="true">#</a> 迭代器与生成器</h2><p><a name="11.1"></a><a name="iterators--nope"></a></p>',3),nt=(0,p._)("a",{href:"#iterators--nope"},"11.1",-1),st=(0,p.Uk)(" 不要用迭代器。使用 JavaScript 高级函数代替 "),at=(0,p._)("code",null,"for-in",-1),pt=(0,p.Uk)("、 "),et=(0,p._)("code",null,"for-of",-1),tt=(0,p.Uk)("。eslint: "),ot={href:"http://eslint.org/docs/rules/no-iterator.html",target:"_blank",rel:"noopener noreferrer"},ct=(0,p._)("code",null,"no-iterator",-1),lt=(0,p.Uk)(),ut={href:"http://eslint.org/docs/rules/no-restricted-syntax",target:"_blank",rel:"noopener noreferrer"},rt=(0,p._)("code",null,"no-restricted-syntax",-1),it=(0,p.uE)('<blockquote><p>为什么？这强调了我们不可变的规则。 处理返回值的纯函数比处理副作用更容易。</p></blockquote><blockquote><p>用数组的这些迭代方法： <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / ... , 用对象的这些方法 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> 去产生一个数组，这样你就能去遍历对象了。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnumbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+=</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best (use the functional force)</span>\n<span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  increasedByOne<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnumbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> increasedByOne<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best (keeping it functional)</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',3),kt=(0,p.uE)('<p><a name="11.2"></a><a name="generators--nope"></a></p><ul><li><p><a href="#generators--nope">11.2</a> 现在暂时不要使用生成器。</p><blockquote><p>为什么？生成器目前不能很好地转换为 ES5 语法。</p></blockquote></li></ul><p><a name="11.3"></a><a name="generators--spacing"></a></p>',3),bt=(0,p._)("a",{href:"#generators--spacing"},"11.3",-1),mt=(0,p.Uk)(" 如果你一定要用生成器，或者你忽略 "),dt=(0,p._)("a",{href:"#generators--nope"},"我们的建议",-1),gt=(0,p.Uk)("，请确保它们的函数标志空格是得当的。eslint: "),ft={href:"http://eslint.org/docs/rules/generator-star-spacing",target:"_blank",rel:"noopener noreferrer"},yt=(0,p._)("code",null,"generator-star-spacing",-1),ht=(0,p.uE)('<blockquote><p>为什么？<code>function</code> 和 <code>*</code> 是同一概念关键字 - <code>*</code>不是<code>function</code>的修饰符，<code>function*</code> 是一个和<code>function</code> 不一样的独特结构。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">quux</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span><span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// very bad</span>\n<span class="token keyword">function</span>\n<span class="token operator">*</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// very bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">wat</span> <span class="token operator">=</span> <span class="token keyword">function</span>\n<span class="token operator">*</span>\n<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div>',2),vt=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><p><a name="12.1"></a><a name="properties--dot"></a></p>',3),wt=(0,p._)("a",{href:"#properties--dot"},"12.1",-1),_t=(0,p.Uk)(" 访问属性时使用点符号。eslint: "),jt={href:"http://eslint.org/docs/rules/dot-notation.html",target:"_blank",rel:"noopener noreferrer"},xt=(0,p._)("code",null,"dot-notation",-1),Et=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jedi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">[</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">.</span>jedi<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',1),Ut=(0,p.uE)('<p><a name="12.2"></a><a name="properties--bracket"></a></p><ul><li><p><a href="#properties--bracket">12.2</a> 当使用变量获取属性时用方括号 <code>[]</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jedi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> luke<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><p><a name="12.3"></a><a name="es2016-properties--exponentiation-operator"></a></p>',3),qt=(0,p._)("a",{href:"#es2016-properties--exponentiation-operator"},"12.3",-1),At=(0,p.Uk)(" 做幂运算时用幂操作符 "),Bt=(0,p._)("code",null,"**",-1),St=(0,p.Uk)(" 。eslint: "),Wt={href:"https://eslint.org/docs/rules/no-restricted-properties",target:"_blank",rel:"noopener noreferrer"},Nt=(0,p._)("code",null,"no-restricted-properties",-1),Dt=(0,p.Uk)("."),Ct=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> binary <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> binary <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Ot=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p><a name="13.1"></a><a name="variables--const"></a></p>',3),It=(0,p._)("a",{href:"#variables--const"},"13.1",-1),Pt=(0,p.Uk)(" 使用 "),Tt=(0,p._)("code",null,"const",-1),zt=(0,p.Uk)(" 或 "),Ft=(0,p._)("code",null,"let",-1),Lt=(0,p.Uk)(" 声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。 eslint: "),$t={href:"http://eslint.org/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"},Jt=(0,p._)("code",null,"no-undef",-1),Gt=(0,p.Uk)(),Rt={href:"http://eslint.org/docs/rules/prefer-const",target:"_blank",rel:"noopener noreferrer"},Ht=(0,p._)("code",null,"prefer-const",-1),Mt=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\nsuperPower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> superPower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Vt=(0,p._)("p",null,[(0,p._)("a",{name:"13.2"}),(0,p._)("a",{name:"variables--one-const"})],-1),Qt=(0,p._)("a",{href:"#variables--one-const"},"13.2",-1),Yt=(0,p.Uk)(" 为每个变量声明都用一个 "),Xt=(0,p._)("code",null,"const",-1),Kt=(0,p.Uk)(" 或 "),Zt=(0,p._)("code",null,"let ",-1),no=(0,p.Uk)("。eslint: "),so={href:"http://eslint.org/docs/rules/one-var.html",target:"_blank",rel:"noopener noreferrer"},ao=(0,p._)("code",null,"one-var",-1),po=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token comment">// （与前面的比较，找一找错误）</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',1),eo=(0,p.uE)('<p><a name="13.3"></a><a name="variables--const-let-group"></a></p><ul><li><p><a href="#variables--const-let-group">13.3</a> 把<code>const</code> 和 <code>let</code> 分别放一起。</p><blockquote><p>为什么？在你需要分配一个新的变量，而这个变量依赖之前分配过的变量的时候，这种做法是有帮助的。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">let</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> dragonball<span class="token punctuation">,</span>\n    items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dragonball<span class="token punctuation">;</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> len<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dragonball<span class="token punctuation">;</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n<span class="token keyword">let</span> length<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><p><a name="13.4"></a><a name="variables--define-where-used"></a></p>',3),to=(0,p.uE)('<li><p><a href="#variables--define-where-used">13.4</a> 在你需要的地方声明变量，但是要放在合理的位置。</p><blockquote><p>为什么？<code>let</code> 和 <code>const</code> 都是块级作用域而不是函数级作用域。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad - 不必要的函数调用。</span>\n<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 在需要的时候分配</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><a name="13.5"></a><a name="variables--no-chain-assignment"></a></p></li>',1),oo=(0,p._)("a",{href:"#variables--no-chain-assignment"},"13.5",-1),co=(0,p.Uk)(" 不要使用链式声明变量。 eslint: "),lo={href:"https://eslint.org/docs/rules/no-multi-assign",target:"_blank",rel:"noopener noreferrer"},uo=(0,p._)("code",null,"no-multi-assign",-1),ro=(0,p.uE)('<blockquote><p>为什么？链式声明变量会创建隐式全局变量。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// JavaScript 将这一段解释为</span>\n  <span class="token comment">// let a = ( b = ( c = 1 ) );</span>\n  <span class="token comment">// let 只对变量 a 起作用; 变量 b 和 c 都变成了全局变量</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token comment">// `const` 也是如此</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',2),io=(0,p._)("p",null,[(0,p._)("a",{name:"13.6"}),(0,p._)("a",{name:"variables--unary-increment-decrement"})],-1),ko=(0,p._)("a",{href:"#variables--unary-increment-decrement"},"13.6",-1),bo=(0,p.Uk)(" 不要使用一元自增自减运算符（"),mo=(0,p._)("code",null,"++",-1),go=(0,p.Uk)("， "),fo=(0,p._)("code",null,"--",-1),yo=(0,p.Uk)("）. eslint "),ho={href:"http://eslint.org/docs/rules/no-plusplus",target:"_blank",rel:"noopener noreferrer"},vo=(0,p._)("code",null,"no-plusplus",-1),wo=(0,p.uE)('<blockquote><p>为什么？根据 eslint 文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的静默错误。 使用 <code>num + = 1</code> 而不是 <code>num ++</code> 或 <code>num ++</code> 语句也是含义清晰的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">// bad</span>\n\n  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  num<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token operator">--</span>num<span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> truthyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      truthyCount<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// good</span>\n\n  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  num <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> sum <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> truthyCount <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',2),_o=(0,p._)("p",null,[(0,p._)("a",{name:"13.7"}),(0,p._)("a",{name:"variables--linebreak"})],-1),jo=(0,p._)("a",{href:"#variables--linebreak"},"13.7",-1),xo=(0,p.Uk)(" 在赋值的时候避免在 "),Eo=(0,p._)("code",null,"=",-1),Uo=(0,p.Uk)(" 前/后换行。 如果你的赋值语句超出 "),qo={href:"https://eslint.org/docs/rules/max-len.html",target:"_blank",rel:"noopener noreferrer"},Ao=(0,p._)("code",null,"max-len",-1),Bo=(0,p.Uk)("，那就用小括号把这个值包起来再换行。eslint "),So={href:"https://eslint.org/docs/rules/operator-linebreak.html",target:"_blank",rel:"noopener noreferrer"},Wo=(0,p._)("code",null,"operator-linebreak",-1),No=(0,p.Uk)("."),Do=(0,p.uE)('<blockquote><p>为什么？在 <code>=</code> 附近换行容易混淆这个赋值语句。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span>\n  <span class="token function">superLongLongLongLongLongLongLongLongFunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo\n  <span class="token operator">=</span> <span class="token string">&#39;superLongLongLongLongLongLongLongLongString&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token function">superLongLongLongLongLongLongLongLongFunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;superLongLongLongLongLongLongLongLongString&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',2),Co=(0,p._)("p",null,[(0,p._)("a",{name:"13.8"}),(0,p._)("a",{name:"variables--no-unused-vars"})],-1),Oo=(0,p._)("a",{href:"#variables--no-unused-vars"},"13.8",-1),Io=(0,p.Uk)(" 不允许有未使用的变量。eslint: "),Po={href:"https://eslint.org/docs/rules/no-unused-vars",target:"_blank",rel:"noopener noreferrer"},To=(0,p._)("code",null,"no-unused-vars",-1),zo=(0,p.uE)('<blockquote><p>为什么？一个声明了但未使用的变量更像是由于重构未完成产生的错误。这种在代码中出现的变量会使阅读者迷惑。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n\n<span class="token keyword">var</span> some_unused_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 写了没用</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\ny <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 变量改了自己的值，也没有用这个变量</span>\n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nz <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 参数定义了但未使用</span>\n<span class="token keyword">function</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getXPlusY</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getXPlusY</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;type&#39; 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。</span>\n<span class="token comment">// 这是从对象中抽取一个忽略特殊字段的对象的一种形式</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>coords <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>\n<span class="token comment">// &#39;coords&#39; 现在就是一个没有 &#39;type&#39; 属性的 &#39;data&#39; 对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',2),Fo=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="提升" tabindex="-1"><a class="header-anchor" href="#提升" aria-hidden="true">#</a> 提升</h2><p><a name="14.1"></a><a name="hoisting--about"></a></p>',3),Lo=(0,p._)("a",{href:"#hoisting--about"},"14.1",-1),$o=(0,p.Uk)(),Jo=(0,p._)("code",null,"var",-1),Go=(0,p.Uk)(" 声明会被提前到离他最近的作用域的最前面，但是它的赋值语句并没有提前。"),Ro=(0,p._)("code",null,"const",-1),Ho=(0,p.Uk)(" 和 "),Mo=(0,p._)("code",null,"let",-1),Vo=(0,p.Uk)(" 被赋予了新的概念 "),Qo={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let",target:"_blank",rel:"noopener noreferrer"},Yo=(0,p.Uk)("暂时性死区"),Xo=(0,p.Uk)("。 重要的是要知道为什么 "),Ko={href:"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15",target:"_blank",rel:"noopener noreferrer"},Zo=(0,p.Uk)("typeof 不再安全"),nc=(0,p.Uk)("."),sc=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 我们知道这个不会工作，假设没有定义全局的 notDefined</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notDefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在你引用的地方之后声明一个变量，他会正常输出是因为变量提升。</span>\n<span class="token comment">// 注意： declaredButNotAssigned 的值 true 没有被提升。</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n  <span class="token keyword">var</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 解释器把变量声明提升到作用域最前面，</span>\n<span class="token comment">// 可以重写成如下例子， 二者意义相同。</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> declaredButNotAssigned<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n  declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用 const，let就不一样了。</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n  <span class="token keyword">const</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',1),ac=(0,p.uE)('<p><a name="14.2"></a><a name="hoisting--anon-expressions"></a></p><ul><li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数表达式和 <code>var</code> 情况相同。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError anonymous is not a function</span>\n\n  <span class="token comment">// 不管后面是函数、数字还是字符串，都是一样的，总结就是实际代码中最好不要用 var。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">anonymous</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anonymous function expression&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><p><a name="14.3"></a><a name="hoisting--named-expresions"></a></p><ul><li><p><a href="#hoisting--named-expresions">14.3</a> 已命名函数表达式提升他的变量名，不是函数名或函数体。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ReferenceError superPower is not defined</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Flying&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数名和变量名一样是也如此。</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;named&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul><p><a name="14.4"></a><a name="hoisting--declarations"></a></p>',5),pc=(0,p.uE)('<li><p><a href="#hoisting--declarations">14.4</a> 函数声明则提升了函数名和函数体。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; Flying</span>\n\n  <span class="token keyword">function</span> <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Flying&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li>',1),ec=(0,p.Uk)("详情请见 "),tc={href:"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/",target:"_blank",rel:"noopener noreferrer"},oc=(0,p.Uk)("JavaScript Scoping & Hoisting"),cc=(0,p.Uk)(" by "),lc={href:"http://www.adequatelygood.com/",target:"_blank",rel:"noopener noreferrer"},uc=(0,p.Uk)("Ben Cherry"),rc=(0,p.Uk)("."),ic=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="比较运算符与相等" tabindex="-1"><a class="header-anchor" href="#比较运算符与相等" aria-hidden="true">#</a> 比较运算符与相等</h2><p><a name="15.1"></a><a name="comparison--eqeqeq"></a></p>',3),kc=(0,p._)("a",{href:"#comparison--eqeqeq"},"15.1",-1),bc=(0,p.Uk)(" 用 "),mc=(0,p._)("code",null,"===",-1),dc=(0,p.Uk)(" 和 "),gc=(0,p._)("code",null,"!==",-1),fc=(0,p.Uk)(" 而不是 "),yc=(0,p._)("code",null,"==",-1),hc=(0,p.Uk)(" 和 "),vc=(0,p._)("code",null,"!=",-1),wc=(0,p.Uk)(". eslint: "),_c={href:"http://eslint.org/docs/rules/eqeqeq.html",target:"_blank",rel:"noopener noreferrer"},jc=(0,p._)("code",null,"eqeqeq",-1),xc=(0,p.uE)('<p><a name="15.2"></a><a name="comparison--if"></a></p><ul><li><p><a href="#comparison--if">15.2</a> 条件语句如 <code>if</code> 语句使用强制 <code>ToBoolean</code> 抽象方法来计算它们的表达式，并且始终遵循以下简单规则：</p><ul><li><strong>Objects</strong> 计算成 <strong>true</strong></li><li><strong>Undefined</strong> 计算成 <strong>false</strong></li><li><strong>Null</strong> 计算成 <strong>false</strong></li><li><strong>Booleans</strong> 计算成 <strong>the value of the boolean</strong></li><li><strong>Numbers</strong><ul><li><strong>+0, -0, or NaN</strong> 计算成 <strong>false</strong></li><li>其他 <strong>true</strong></li></ul></li><li><strong>Strings</strong><ul><li><code>&#39;&#39;</code> 计算成 <strong>false</strong></li><li>其他 <strong>true</strong></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// true</span>\n  <span class="token comment">// 数组（即使是空数组）是对象，对象会计算成 true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p><a name="15.3"></a><a name="comparison--shortcuts"></a></p><ul><li><p><a href="#comparison--shortcuts">15.3</a> 布尔值要用缩写，而字符串和数字要明确使用比较操作符。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isValid <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></li></ul><p><a name="15.4"></a><a name="comparison--moreinfo"></a></p>',5),Ec=(0,p._)("a",{href:"#comparison--moreinfo"},"15.4",-1),Uc=(0,p.Uk)(" 更多信息请见 Angus Croll 的 "),qc={href:"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108",target:"_blank",rel:"noopener noreferrer"},Ac=(0,p.Uk)("Truth Equality and JavaScript"),Bc=(0,p.Uk)("。"),Sc=(0,p._)("p",null,[(0,p._)("a",{name:"15.5"}),(0,p._)("a",{name:"comparison--switch-blocks"})],-1),Wc=(0,p.uE)('<a href="#comparison--switch-blocks">15.5</a> 在 <code>case</code> 和 <code>default</code> 分句里用大括号创建一块包含词法声明的区域（例如：<code>let</code>、<code>const</code>、<code>function</code> 和 <code>class</code>）。eslint rules: ',14),Nc={href:"http://eslint.org/docs/rules/no-case-declarations.html",target:"_blank",rel:"noopener noreferrer"},Dc=(0,p._)("code",null,"no-case-declarations",-1),Cc=(0,p.Uk)("."),Oc=(0,p.uE)('<blockquote><p>为什么？词法声明在整个 <code>switch</code> 的代码块里都可见，但是只有当其被分配后才会初始化，仅当这个 <code>case</code> 被执行时才被初始化。当多个 <code>case</code> 分句试图定义同一个对象时就会出现问题。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>\n    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>',2),Ic=(0,p._)("p",null,[(0,p._)("a",{name:"15.6"}),(0,p._)("a",{name:"comparison--nested-ternaries"})],-1),Pc=(0,p._)("a",{href:"#comparison--nested-ternaries"},"15.6",-1),Tc=(0,p.Uk)(" 三元表达式不应该嵌套，通常是单行表达式。eslint rules: "),zc={href:"http://eslint.org/docs/rules/no-nested-ternary.html",target:"_blank",rel:"noopener noreferrer"},Fc=(0,p._)("code",null,"no-nested-ternary",-1),Lc=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2\n  <span class="token operator">?</span> <span class="token string">&quot;bar&quot;</span>\n  <span class="token operator">:</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> <span class="token string">&quot;baz&quot;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// better</span>\n<span class="token keyword">const</span> maybeNull <span class="token operator">=</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> <span class="token string">&#39;baz&#39;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2\n<span class="token operator">?</span> <span class="token string">&#39;bar&#39;</span>\n  <span class="token operator">:</span> maybeNull<span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> maybeNull <span class="token operator">=</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> <span class="token string">&#39;baz&#39;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2 <span class="token operator">?</span> <span class="token string">&#39;bar&#39;</span> <span class="token operator">:</span> maybeNull<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',1),$c=(0,p._)("p",null,[(0,p._)("a",{name:"15.7"}),(0,p._)("a",{name:"comparison--unneeded-ternary"})],-1),Jc=(0,p._)("a",{href:"#comparison--unneeded-ternary"},"15.7",-1),Gc=(0,p.Uk)(" 避免不必要的三元表达式。eslint rules: "),Rc={href:"http://eslint.org/docs/rules/no-unneeded-ternary.html",target:"_blank",rel:"noopener noreferrer"},Hc=(0,p._)("code",null,"no-unneeded-ternary",-1),Mc=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> c <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> c <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">;</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token operator">!</span>c<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Vc=(0,p._)("p",null,[(0,p._)("a",{name:"15.8"}),(0,p._)("a",{name:"comparison--no-mixed-operators"})],-1),Qc=(0,p._)("a",{href:"#comparison--no-mixed-operators"},"15.8",-1),Yc=(0,p.Uk)(" 用圆括号来组合操作符。 只有当标准的算术运算符（"),Xc=(0,p._)("code",null,"+",-1),Kc=(0,p.Uk)(", "),Zc=(0,p._)("code",null,"-",-1),nl=(0,p.Uk)(", "),sl=(0,p._)("code",null,"*",-1),al=(0,p.Uk)(", 和 "),pl=(0,p._)("code",null,"/",-1),el=(0,p.Uk)("）， 并且它们的优先级显而易见时，才可以不用圆括号括起来。eslint: "),tl={href:"https://eslint.org/docs/rules/no-mixed-operators.html",target:"_blank",rel:"noopener noreferrer"},ol=(0,p._)("code",null,"no-mixed-operators",-1),cl=(0,p.uE)('<blockquote><p>为什么？这提高了可读性，并且明确了开发者的意图。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">**</span> b <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">%</span> d<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token comment">// 别人会陷入(a || b) &amp;&amp; c 的迷惑中</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> d<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">**</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> d<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">/</span> c <span class="token operator">*</span> d<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',2),ll=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ back to top</a></strong></p><h2 id="块" tabindex="-1"><a class="header-anchor" href="#块" aria-hidden="true">#</a> 块</h2><p><a name="16.1"></a><a name="blocks--braces"></a></p>',3),ul=(0,p._)("a",{href:"#blocks--braces"},"16.1",-1),rl=(0,p.Uk)(" 用大括号包裹多行代码块。 eslint: "),il={href:"https://eslint.org/docs/rules/nonblock-statement-body-position",target:"_blank",rel:"noopener noreferrer"},kl=(0,p._)("code",null,"nonblock-statement-body-position",-1),bl=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',1),ml=(0,p._)("p",null,[(0,p._)("a",{name:"16.2"}),(0,p._)("a",{name:"blocks--cuddled-elses"})],-1),dl=(0,p._)("a",{href:"#blocks--cuddled-elses"},"16.2",-1),gl=(0,p.Uk)(),fl=(0,p._)("code",null,"if",-1),yl=(0,p.Uk)(" 表达式的 "),hl=(0,p._)("code",null,"else",-1),vl=(0,p.Uk)("和 "),wl=(0,p._)("code",null,"if",-1),_l=(0,p.Uk)(" 的右大括号在一行。eslint: "),jl={href:"http://eslint.org/docs/rules/brace-style.html",target:"_blank",rel:"noopener noreferrer"},xl=(0,p._)("code",null,"brace-style",-1),El=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">thing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function">thing3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">thing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function">thing3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',1),Ul=(0,p._)("p",null,[(0,p._)("a",{name:"16.3"}),(0,p._)("a",{name:"blocks--no-else-return"})],-1),ql=(0,p.uE)('<a href="#blocks--no-else-return">16.3</a> 如果 <code>if</code> 语句中总是需要用 <code>return</code> 返回，那后续的 <code>else</code> 就不需要写了。 <code>if</code> 块中包含 <code>return</code>， 它后面的 <code>else if</code> 块中也包含了 <code>return</code>， 这个时候就可以把 <code>return</code> 分到多个 <code>if</code> 语句块中。 eslint: ',20),Al={href:"https://eslint.org/docs/rules/no-else-return",target:"_blank",rel:"noopener noreferrer"},Bl=(0,p._)("code",null,"no-else-return",-1),Sl=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">cats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">cats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">dogs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> z<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div>',1),Wl=(0,p.uE)('<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句" aria-hidden="true">#</a> 控制语句</h2><p><a name="17.1"></a><a name="control-statements"></a></p><ul><li><p><a href="#control-statements">17.1</a> 当你的控制语句（<code>if</code>, <code>while</code> 等）太长或者超过最大长度限制的时候，把每一个（组）判断条件放在单独一行里。逻辑操作符放在行首。</p><blockquote><p>为什么？把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更清晰。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">||</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">doesItLookGoodWhenItBecomesThatLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isThisReallyHappening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span>\n  bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span>\n  <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span>\n  bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  foo <span class="token operator">===</span> <span class="token number">123</span>\n  <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">||</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>\n  <span class="token operator">&amp;&amp;</span> <span class="token function">doesItLookGoodWhenItBecomesThatLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token operator">&amp;&amp;</span> <span class="token function">isThisReallyHappening</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div></li></ul><p><a name="17.2"></a><a name="control-statements--value-selection"></a></p><ul><li><p><a href="#control-statements--value-selection">17.2</a> 不要用选择操作符代替控制语句。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token operator">!</span>isRunning <span class="token operator">&amp;&amp;</span> <span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p><a name="18.1"></a><a name="comments--multiline"></a></p><ul><li><p><a href="#comments--multiline">18.1</a> 多行注释用 <code>/** ... */</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token comment">// make() returns a new element</span>\n<span class="token comment">// based on the passed in tag name</span>\n<span class="token comment">//</span>\n<span class="token comment">// @param {String} tag</span>\n<span class="token comment">// @return {Element} element</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token doc-comment comment">/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li></ul><p><a name="18.2"></a><a name="comments--singleline"></a></p><ul><li><p><a href="#comments--singleline">18.2</a> 单行注释用 <code>//</code>，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// is current tab</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetching type...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetching type...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// also good</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li></ul><p><a name="18.3"></a><a name="comments--spaces"></a></p>',13),Nl=(0,p._)("a",{href:"#comments--spaces"},"18.3",-1),Dl=(0,p.Uk)(" 所有注释开头空一格，方便阅读。eslint: "),Cl={href:"http://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"},Ol=(0,p._)("code",null,"spaced-comment",-1),Il=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token comment">//is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token doc-comment comment">/**\n *make() returns a new element\n *based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token doc-comment comment">/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',1),Pl=(0,p.uE)('<p><a name="18.4"></a><a name="comments--actionitems"></a></p><ul><li><a href="#comments--actionitems">18.4</a> 在你的注释前使用 <code>FIXME</code> 或 <code>TODO</code> 前缀，这有助于其他开发人员快速理解你指出的需要修复的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，它们是有明确含义的。<code>FIXME：需要修复这个问题</code>或<code>TODO：需要实现的功能</code>。</li></ul><p><a name="18.5"></a><a name="comments--fixme"></a></p><ul><li><p><a href="#comments--fixme">18.5</a> 用 <code>// FIXME:</code> 给问题做注释。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Abacus</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// FIXME: shouldn&#39;t use a global here</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><a name="18.6"></a><a name="comments--todo"></a></p><ul><li><p><a href="#comments--todo">18.6</a> 用 <code>// TODO:</code> 去注释问题的解决方案。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Abacus</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// TODO: total should be configurable by an options param</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h2><p><a name="19.1"></a><a name="whitespace--spaces"></a></p>',9),Tl=(0,p._)("a",{href:"#whitespace--spaces"},"19.1",-1),zl=(0,p.Uk)(" 一个缩进使用两个空格。eslint: "),Fl={href:"http://eslint.org/docs/rules/indent.html",target:"_blank",rel:"noopener noreferrer"},Ll=(0,p._)("code",null,"indent",-1),$l=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙∙∙∙<span class="token keyword">const</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙<span class="token keyword">const</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙∙<span class="token keyword">const</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',1),Jl=(0,p._)("p",null,[(0,p._)("a",{name:"19.2"}),(0,p._)("a",{name:"whitespace--before-blocks"})],-1),Gl=(0,p._)("a",{href:"#whitespace--before-blocks"},"19.2",-1),Rl=(0,p.Uk)(" 在大括号前空一格。eslint: "),Hl={href:"http://eslint.org/docs/rules/space-before-blocks.html",target:"_blank",rel:"noopener noreferrer"},Ml=(0,p._)("code",null,"space-before-blocks",-1),Vl=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\ndog<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">,</span>\n  breed<span class="token operator">:</span> <span class="token string">&#39;Bernese Mountain Dog&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\ndog<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">,</span>\n  breed<span class="token operator">:</span> <span class="token string">&#39;Bernese Mountain Dog&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',1),Ql=(0,p._)("p",null,[(0,p._)("a",{name:"19.3"}),(0,p._)("a",{name:"whitespace--around-keywords"})],-1),Yl=(0,p._)("a",{href:"#whitespace--around-keywords"},"19.3",-1),Xl=(0,p.Uk)(" 在控制语句（"),Kl=(0,p._)("code",null,"if",-1),Zl=(0,p.Uk)(", "),nu=(0,p._)("code",null,"while",-1),su=(0,p.Uk)(" 等）的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint: "),au={href:"http://eslint.org/docs/rules/keyword-spacing.html",target:"_blank",rel:"noopener noreferrer"},pu=(0,p._)("code",null,"keyword-spacing",-1),eu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>isJedi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isJedi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">fight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;Swooosh!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swooosh!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',1),tu=(0,p._)("p",null,[(0,p._)("a",{name:"19.4"}),(0,p._)("a",{name:"whitespace--infix-ops"})],-1),ou=(0,p._)("a",{href:"#whitespace--infix-ops"},"19.4",-1),cu=(0,p.Uk)(" 用空格来隔开运算符。eslint: "),lu={href:"http://eslint.org/docs/rules/space-infix-ops.html",target:"_blank",rel:"noopener noreferrer"},uu=(0,p._)("code",null,"space-infix-ops",-1),ru=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> x<span class="token operator">=</span>y<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),iu=(0,p._)("p",null,[(0,p._)("a",{name:"19.5"}),(0,p._)("a",{name:"whitespace--newline-at-end"})],-1),ku=(0,p._)("a",{href:"#whitespace--newline-at-end"},"19.5",-1),bu=(0,p.Uk)(" 文件结尾空一行。eslint: "),mu={href:"https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md",target:"_blank",rel:"noopener noreferrer"},du=(0,p._)("code",null,"eol-last",-1),gu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>↵\n↵\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// good</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>↵\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',3),fu=(0,p._)("p",null,[(0,p._)("a",{name:"19.6"}),(0,p._)("a",{name:"whitespace--chains"})],-1),yu=(0,p._)("a",{href:"#whitespace--chains"},"19.6",-1),hu=(0,p.Uk)(" 当出现长的方法链式调用时（>2个）用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint: "),vu={href:"http://eslint.org/docs/rules/newline-per-chained-call",target:"_blank",rel:"noopener noreferrer"},wu=(0,p._)("code",null,"newline-per-chained-call",-1),_u=(0,p.Uk)(),ju={href:"http://eslint.org/docs/rules/no-whitespace-before-property",target:"_blank",rel:"noopener noreferrer"},xu=(0,p._)("code",null,"no-whitespace-before-property",-1),Eu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">classed</span><span class="token punctuation">(</span><span class="token string">&#39;led&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>radius <span class="token operator">+</span> margin<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:g&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tron<span class="token punctuation">.</span>led<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:svg&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">classed</span><span class="token punctuation">(</span><span class="token string">&#39;led&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>radius <span class="token operator">+</span> margin<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:g&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tron<span class="token punctuation">.</span>led<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>',1),Uu=(0,p.uE)('<p><a name="19.7"></a><a name="whitespace--after-blocks"></a></p><ul><li><p><a href="#whitespace--after-blocks">19.7</a> 在一个代码块后下一条语句前空一行。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">return</span> baz<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> baz<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div></li></ul><p><a name="19.8"></a><a name="whitespace--padded-blocks"></a></p>',3),qu=(0,p._)("a",{href:"#whitespace--padded-blocks"},"19.8",-1),Au=(0,p.Uk)(" 不要用空白行填充块。eslint: "),Bu={href:"http://eslint.org/docs/rules/padded-blocks.html",target:"_blank",rel:"noopener noreferrer"},Su=(0,p._)("code",null,"padded-blocks",-1),Wu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// also bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',1),Nu=(0,p._)("p",null,[(0,p._)("a",{name:"whitespace--no-multiple-blanks"})],-1),Du=(0,p._)("a",{href:"#whitespace--no-multiple-blanks"},"19.9",-1),Cu=(0,p.Uk)(" 不要在代码之间使用多个空白行填充。eslint: "),Ou={href:"https://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"},Iu=(0,p._)("code",null,"no-multiple-empty-lines",-1),Pu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fullName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span>today<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter">today<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fullName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">getAge</span><span class="token punctuation">(</span>today<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter">today<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p><a name="19.10"></a><a name="whitespace--in-parens"></a></p>',2),Tu=(0,p._)("a",{href:"#whitespace--in-parens"},"19.10",-1),zu=(0,p.Uk)(" 圆括号里不要加空格。eslint: "),Fu={href:"http://eslint.org/docs/rules/space-in-parens.html",target:"_blank",rel:"noopener noreferrer"},Lu=(0,p._)("code",null,"space-in-parens",-1),$u=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span> <span class="token parameter">foo</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span> foo <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',1),Ju=(0,p._)("p",null,[(0,p._)("a",{name:"19.11"}),(0,p._)("a",{name:"whitespace--in-brackets"})],-1),Gu=(0,p._)("a",{href:"#whitespace--in-brackets"},"19.11",-1),Ru=(0,p.Uk)(" 方括号里不要加空格。 eslint: "),Hu={href:"http://eslint.org/docs/rules/array-bracket-spacing.html",target:"_blank",rel:"noopener noreferrer"},Mu=(0,p._)("code",null,"array-bracket-spacing",-1),Vu=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good，逗号分隔符后还是要空格的。</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Qu=(0,p._)("p",null,[(0,p._)("a",{name:"19.12"}),(0,p._)("a",{name:"whitespace--in-braces"})],-1),Yu=(0,p._)("a",{href:"#whitespace--in-braces"},"19.12",-1),Xu=(0,p.Uk)(" 花括号里加空格 。eslint: "),Ku={href:"http://eslint.org/docs/rules/object-curly-spacing.html",target:"_blank",rel:"noopener noreferrer"},Zu=(0,p._)("code",null,"object-curly-spacing",-1),nr=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>clark<span class="token operator">:</span> <span class="token string">&#39;kent&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> clark<span class="token operator">:</span> <span class="token string">&#39;kent&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),sr=(0,p._)("p",null,[(0,p._)("a",{name:"19.13"}),(0,p._)("a",{name:"whitespace--max-len"})],-1),ar=(0,p._)("a",{href:"#whitespace--max-len"},"19.13",-1),pr=(0,p.Uk)(" 避免一行代码超过100个字符（包含空格）。注意：对于 "),er=(0,p._)("a",{href:"#strings--line-length"},"上面",-1),tr=(0,p.Uk)("，长字符串不受此规则限制，不应换行。 eslint: "),or={href:"http://eslint.org/docs/rules/max-len.html",target:"_blank",rel:"noopener noreferrer"},cr=(0,p._)("code",null,"max-len",-1),lr=(0,p.uE)('<blockquote><p>为什么？这样确保可读性和可维护性。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> jsonData <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux<span class="token punctuation">.</span>xyzzy<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;https://airbnb.com/&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You have failed this city.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> jsonData\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux<span class="token punctuation">.</span>xyzzy<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;https://airbnb.com/&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You have failed this city.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',2),ur=(0,p._)("p",null,[(0,p._)("a",{name:"19.14"}),(0,p._)("a",{name:"whitespace--block-spacing"})],-1),rr=(0,p._)("a",{href:"#whitespace--block-spacing"},"19.14",-1),ir=(0,p.Uk)(" 作为语句的花括号内也要加空格 —— "),kr=(0,p._)("code",null,"{",-1),br=(0,p.Uk)(" 后和 "),mr=(0,p._)("code",null,"}",-1),dr=(0,p.Uk)(" 前都需要空格。 eslint: "),gr={href:"https://eslint.org/docs/rules/block-spacing",target:"_blank",rel:"noopener noreferrer"},fr=(0,p._)("code",null,"block-spacing",-1),yr=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),hr=(0,p._)("p",null,[(0,p._)("a",{name:"19.15"}),(0,p._)("a",{name:"whitespace--comma-spacing"})],-1),vr=(0,p._)("a",{href:"#whitespace--comma-spacing"},"19.15",-1),wr=(0,p.Uk)(),_r=(0,p._)("code",null,",",-1),jr=(0,p.Uk)(" 前不要空格， "),xr=(0,p._)("code",null,",",-1),Er=(0,p.Uk)(" 后需要空格。 eslint: "),Ur={href:"https://eslint.org/docs/rules/comma-spacing",target:"_blank",rel:"noopener noreferrer"},qr=(0,p._)("code",null,"comma-spacing",-1),Ar=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),Br=(0,p._)("p",null,[(0,p._)("a",{name:"19.16"}),(0,p._)("a",{name:"whitespace--computed-property-spacing"})],-1),Sr=(0,p._)("a",{href:"#whitespace--computed-property-spacing"},"19.16",-1),Wr=(0,p.Uk)(" 禁止强制在计算属性中使用空格。 eslint: "),Nr={href:"https://eslint.org/docs/rules/computed-property-spacing",target:"_blank",rel:"noopener noreferrer"},Dr=(0,p._)("code",null,"computed-property-spacing",-1),Cr=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\nobj<span class="token punctuation">[</span>foo <span class="token punctuation">]</span>\nobj<span class="token punctuation">[</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token operator">:</span> a<span class="token punctuation">}</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">[</span> bar <span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token comment">// good</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">]</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">:</span> a <span class="token punctuation">}</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),Or=(0,p._)("p",null,[(0,p._)("a",{name:"19.17"}),(0,p._)("a",{name:"whitespace--func-call-spacing"})],-1),Ir=(0,p._)("a",{href:"#whitespace--func-call-spacing"},"19.17",-1),Pr=(0,p.Uk)(" 调用函数时，函数名和小括号之间不要空格。 eslint: "),Tr={href:"https://eslint.org/docs/rules/func-call-spacing",target:"_blank",rel:"noopener noreferrer"},zr=(0,p._)("code",null,"func-call-spacing",-1),Fr=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">func</span>\n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),Lr=(0,p._)("p",null,[(0,p._)("a",{name:"19.18"}),(0,p._)("a",{name:"whitespace--key-spacing"})],-1),$r=(0,p._)("a",{href:"#whitespace--key-spacing"},"19.18",-1),Jr=(0,p.Uk)(" 在对象的字面量属性中， "),Gr=(0,p._)("code",null,"key",-1),Rr=(0,p.Uk)(" 和 "),Hr=(0,p._)("code",null,"value",-1),Mr=(0,p.Uk)(" 之间要有空格。 eslint: "),Vr={href:"https://eslint.org/docs/rules/key-spacing",target:"_blank",rel:"noopener noreferrer"},Qr=(0,p._)("code",null,"key-spacing",-1),Yr=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token operator">:</span><span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',1),Xr=(0,p._)("p",null,[(0,p._)("a",{name:"19.19"}),(0,p._)("a",{name:"whitespace--no-trailing-spaces"})],-1),Kr=(0,p._)("a",{href:"#whitespace--no-trailing-spaces"},"19.19",-1),Zr=(0,p.Uk)(" 行末不要空格。 eslint: "),ni={href:"https://eslint.org/docs/rules/no-trailing-spaces",target:"_blank",rel:"noopener noreferrer"},si=(0,p._)("code",null,"no-trailing-spaces",-1),ai=(0,p._)("p",null,[(0,p._)("a",{name:"19.20"}),(0,p._)("a",{name:"whitespace--no-multiple-empty-lines"})],-1),pi=(0,p._)("a",{href:"#whitespace--no-multiple-empty-lines"},"19.20",-1),ei=(0,p.Uk)(" 避免出现多个空行。 在文件末尾只允许空一行。避免在文件开始处出现空行。eslint: "),ti={href:"https://eslint.org/docs/rules/no-multiple-empty-lines",target:"_blank",rel:"noopener noreferrer"},oi=(0,p._)("code",null,"no-multiple-empty-lines",-1),ci=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad - multiple empty lines</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - 2+ newlines at end of file</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// bad - 1+ newline(s) at beginning of file</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="逗号" tabindex="-1"><a class="header-anchor" href="#逗号" aria-hidden="true">#</a> 逗号</h2><p><a name="20.1"></a><a name="commas--leading-trailing"></a></p>',4),li=(0,p._)("a",{href:"#commas--leading-trailing"},"20.1",-1),ui=(0,p.Uk)(" 不要前置逗号。eslint: "),ri={href:"http://eslint.org/docs/rules/comma-style.html",target:"_blank",rel:"noopener noreferrer"},ii=(0,p._)("code",null,"comma-style",-1),ki=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> story <span class="token operator">=</span> <span class="token punctuation">[</span>\n    once\n  <span class="token punctuation">,</span> upon\n  <span class="token punctuation">,</span> aTime\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> story <span class="token operator">=</span> <span class="token punctuation">[</span>\n  once<span class="token punctuation">,</span>\n  upon<span class="token punctuation">,</span>\n  aTime<span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n    firstName<span class="token operator">:</span> <span class="token string">&#39;Ada&#39;</span>\n  <span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&#39;Lovelace&#39;</span>\n  <span class="token punctuation">,</span> birthYear<span class="token operator">:</span> <span class="token number">1815</span>\n  <span class="token punctuation">,</span> superPower<span class="token operator">:</span> <span class="token string">&#39;computers&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Ada&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Lovelace&#39;</span><span class="token punctuation">,</span>\n  birthYear<span class="token operator">:</span> <span class="token number">1815</span><span class="token punctuation">,</span>\n  superPower<span class="token operator">:</span> <span class="token string">&#39;computers&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',1),bi=(0,p._)("p",null,[(0,p._)("a",{name:"20.2"}),(0,p._)("a",{name:"commas--dangling"})],-1),mi=(0,p._)("a",{href:"#commas--dangling"},"20.2",-1),di=(0,p.Uk)(" 额外结尾逗号: "),gi=(0,p._)("strong",null,"要",-1),fi=(0,p.Uk)(" eslint: "),yi={href:"http://eslint.org/docs/rules/comma-dangle.html",target:"_blank",rel:"noopener noreferrer"},hi=(0,p._)("code",null,"comma-dangle",-1),vi=(0,p.Uk)("为什么？这使 git diffs 更简洁。此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的 "),wi={href:"https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas",target:"_blank",rel:"noopener noreferrer"},_i=(0,p.Uk)("结尾逗号问题"),ji=(0,p.Uk)("。"),xi=(0,p.uE)('<div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// bad - 没有结尾逗号的 git diff\nconst hero = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    firstName: &#39;Florence&#39;,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    lastName: &#39;Nightingale&#39;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    lastName: &#39;Nightingale&#39;,\n</span><span class="token prefix inserted">+</span><span class="token line">    inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;]\n</span></span>};\n\n// good - 有结尾逗号的 git diff\nconst hero = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    firstName: &#39;Florence&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">    lastName: &#39;Nightingale&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;],\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Dana&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Scully&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;Batman&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Superman&#39;</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Dana&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Scully&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;Batman&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Superman&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good (注意，逗号不应出现在使用了 ... 操作符后的参数后面)</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n  <span class="token operator">...</span>heroArgs</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good  (注意，逗号不应出现在使用了 ... 操作符后的参数后面)</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n  <span class="token operator">...</span>heroArgs\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div>',2),Ei=(0,p._)("p",null,[(0,p._)("strong",null,[(0,p._)("a",{href:"#%E7%9B%AE%E5%BD%95"},"⬆ 返回顶部")])],-1),Ui=(0,p._)("h2",{id:"分号",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#分号","aria-hidden":"true"},"#"),(0,p.Uk)(" 分号")],-1),qi=(0,p._)("p",null,[(0,p._)("a",{name:"21.1"})],-1),Ai=(0,p._)("a",{href:"#21.1"},"21.1",-1),Bi=(0,p.Uk)(),Si=(0,p._)("strong",null,"要分号！",-1),Wi=(0,p.Uk)(" eslint: "),Ni={href:"http://eslint.org/docs/rules/semi.html",target:"_blank",rel:"noopener noreferrer"},Di=(0,p._)("code",null,"semi",-1),Ci=(0,p.Uk)("为什么？当 JavaScript 遇到没有分号结尾的一行，它会执行 "),Oi={href:"https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion",target:"_blank",rel:"noopener noreferrer"},Ii=(0,p.Uk)("自动插入分号"),Pi=(0,p.Uk)(" 这一规则来决定行末是否加分号。如果 JavaScript 在你的断行里错误的插入了分号，就会出现一些古怪的行为。当新的功能加到JavaScript 里后， 这些规则会变得更复杂难懂。清晰的结束语句，并通过配置代码检查去检查没有带分号的地方可以帮助你防止这种错误。"),Ti=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad - 抛出异常</span>\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> leia <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">[</span>luke<span class="token punctuation">,</span> leia<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jedi</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> jedi<span class="token punctuation">.</span>father <span class="token operator">=</span> <span class="token string">&#39;vader&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad - 抛出异常</span>\n<span class="token keyword">const</span> reaction <span class="token operator">=</span> <span class="token string">&quot;No! That’s impossible!&quot;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">meanwhileOnTheFalcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 处理 `leia`, `lando`, `chewie`, `r2`, `c3p0`</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad - 将返回 `undefined` 而不是下一行的值。由于 ASI，当 `return`单独出现在一行时，这种情况会一直出现。</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span>\n    <span class="token string">&#39;search your feelings, you know it to be foo&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> leia <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span>luke<span class="token punctuation">,</span> leia<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jedi</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  jedi<span class="token punctuation">.</span>father <span class="token operator">=</span> <span class="token string">&#39;vader&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> reaction <span class="token operator">=</span> <span class="token string">&quot;No! That’s impossible!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">meanwhileOnTheFalcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;search your feelings, you know it to be foo&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><pre><code>[更多](https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214).\n</code></pre><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="类型转换与强制转换" tabindex="-1"><a class="header-anchor" href="#类型转换与强制转换" aria-hidden="true">#</a> 类型转换与强制转换</h2><p><a name="22.1"></a><a name="coercion--explicit"></a></p><ul><li><a href="#coercion--explicit">22.1</a> 在语句开始执行强制类型转换。</li></ul><p><a name="22.2"></a><a name="coercion--strings"></a></p>',7),zi=(0,p._)("a",{href:"#coercion--strings"},"22.2",-1),Fi=(0,p.Uk)(" 字符串: eslint: "),Li={href:"https://eslint.org/docs/rules/no-new-wrappers",target:"_blank",rel:"noopener noreferrer"},$i=(0,p._)("code",null,"no-new-wrappers",-1),Ji=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// =&gt; this.reviewScore = 9;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeof totalScore is &quot;object&quot; not &quot;string&quot;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 将会执行 this.reviewScore.valueOf()</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不保证返回 string</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',1),Gi=(0,p._)("p",null,[(0,p._)("a",{name:"22.3"}),(0,p._)("a",{name:"coercion--numbers"})],-1),Ri=(0,p._)("a",{href:"#coercion--numbers"},"22.3",-1),Hi=(0,p.Uk)(" 数字: 用 "),Mi=(0,p._)("code",null,"Number",-1),Vi=(0,p.Uk)(" 做类型转换，"),Qi=(0,p._)("code",null,"parseInt",-1),Yi=(0,p.Uk)(" 转换 "),Xi=(0,p._)("code",null,"string",-1),Ki=(0,p.Uk)(" 应总是带上基数。 eslint: "),Zi={href:"http://eslint.org/docs/rules/radix",target:"_blank",rel:"noopener noreferrer"},nk=(0,p._)("code",null,"radix",-1),sk=(0,p.uE)('<blockquote><p>为什么？函数 <code>parseInt</code> 会根据指定的基数将字符串转换为数字。字符串开头的空白字符将会被忽略，如果参数基数（第二个参数）为 <code>undefined</code> 或者 <code>0</code> ，除非字符串开头为 <code>0x</code> 或 <code>0X</code>（十六进制），会默认假设为 <code>10</code>。这个差异来自 ECMAScript 3，它不鼓励（但是允许）解释八进制。在 2013 年之前，一些实现不兼容这种行为。因为我们需要支持旧浏览器，所以应当始终指定进制。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> inputValue <span class="token operator">=</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token operator">+</span>inputValue<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> inputValue <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',2),ak=(0,p.uE)('<p><a name="22.4"></a><a name="coercion--comment-deviations"></a></p><ul><li><p><a href="#coercion--comment-deviations">22.4</a> 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 <code>parseInt</code> 是你的性能瓶颈导致你一定要用移位运算。(https://jsperf.com/coercion-vs-casting/3)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// good</span>\n<span class="token doc-comment comment">/**\n * parseInt 是代码运行慢的原因\n * 用 Bitshifting 将字符串转成数字使代码运行效率大幅提升\n */</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> inputValue <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p><a name="22.5"></a><a name="coercion--bitwise"></a></p>',3),pk=(0,p._)("a",{href:"#coercion--bitwise"},"22.5",-1),ek=(0,p.Uk)(),tk=(0,p._)("strong",null,"注意:",-1),ok=(0,p.Uk)(" 用移位运算要小心。数字是用 "),ck={href:"https://es5.github.io/#x4.3.19",target:"_blank",rel:"noopener noreferrer"},lk=(0,p.Uk)("64-位"),uk=(0,p.Uk)("表示的，但移位运算常常返回的是32为整形"),rk={href:"https://es5.github.io/#x11.7",target:"_blank",rel:"noopener noreferrer"},ik=(0,p.Uk)("source"),kk=(0,p.Uk)(")。移位运算对大于 32 位的整数会导致意外行为。"),bk={href:"https://github.com/airbnb/javascript/issues/109",target:"_blank",rel:"noopener noreferrer"},mk=(0,p.Uk)("Discussion"),dk=(0,p.Uk)(". 最大的 32 位整数是 2,147,483,647:"),gk=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2147483647</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span> <span class="token comment">//=&gt; 2147483647</span>\n<span class="token number">2147483648</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span> <span class="token comment">//=&gt; -2147483648</span>\n<span class="token number">2147483649</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span> <span class="token comment">//=&gt; -2147483647</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),fk=(0,p.uE)('<p><a name="22.6"></a><a name="coercion--booleans"></a></p><ul><li><p><a href="#coercion--booleans">22.6</a> 布尔:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h2><p><a name="23.1"></a><a name="naming--descriptive"></a></p>',5),yk=(0,p._)("a",{href:"#naming--descriptive"},"23.1",-1),hk=(0,p.Uk)(" 避免用一个字母命名，让你的命名有意义。eslint: "),vk={href:"http://eslint.org/docs/rules/id-length",target:"_blank",rel:"noopener noreferrer"},wk=(0,p._)("code",null,"id-length",-1),_k=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),jk=(0,p._)("p",null,[(0,p._)("a",{name:"23.2"}),(0,p._)("a",{name:"naming--camelCase"})],-1),xk=(0,p._)("a",{href:"#naming--camelCase"},"23.2",-1),Ek=(0,p.Uk)(" 用小驼峰命名法来命名你的对象、函数、实例。eslint: "),Uk={href:"http://eslint.org/docs/rules/camelcase.html",target:"_blank",rel:"noopener noreferrer"},qk=(0,p._)("code",null,"camelcase",-1),Ak=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> OBJEcttsssss <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> this_is_my_object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> thisIsMyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">thisIsMyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),Bk=(0,p._)("p",null,[(0,p._)("a",{name:"23.3"}),(0,p._)("a",{name:"naming--PascalCase"})],-1),Sk=(0,p._)("a",{href:"#naming--PascalCase"},"23.3",-1),Wk=(0,p.Uk)(" 用大驼峰命名法来命名类。eslint: "),Nk={href:"http://eslint.org/docs/rules/new-cap.html",target:"_blank",rel:"noopener noreferrer"},Dk=(0,p._)("code",null,"new-cap",-1),Ck=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;nope&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;yup&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',1),Ok=(0,p._)("p",null,[(0,p._)("a",{name:"23.4"}),(0,p._)("a",{name:"naming--leading-underscore"})],-1),Ik=(0,p._)("a",{href:"#naming--leading-underscore"},"23.4",-1),Pk=(0,p.Uk)(" 不要用前置或后置下划线。eslint: "),Tk={href:"http://eslint.org/docs/rules/no-underscore-dangle.html",target:"_blank",rel:"noopener noreferrer"},zk=(0,p._)("code",null,"no-underscore-dangle",-1),Fk=(0,p.uE)('<blockquote><p>为什么？JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着私有，事实上，这些属性是完全公有的，因此这部分也是你的 API 的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。如果你想要什么东西变成私有，那就不要让它在这里出现。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>__firstName__ <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>firstName_ <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>_firstName <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),Lk=(0,p._)("p",null,[(0,p._)("a",{name:"23.5"}),(0,p._)("a",{name:"naming--self-this"})],-1),$k=(0,p._)("a",{href:"#naming--self-this"},"23.5",-1),Jk=(0,p.Uk)(" 不要保存引用 "),Gk=(0,p._)("code",null,"this",-1),Rk=(0,p.Uk)("，用箭头函数或 "),Hk={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"},Mk=(0,p.Uk)("函数绑定——Function#bind"),Vk=(0,p.Uk)("。"),Qk=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',1),Yk=(0,p.uE)('<p><a name="23.6"></a><a name="naming--filename-matches-export"></a></p><ul><li><p><a href="#naming--filename-matches-export">23.6</a> <code>export default</code> 导出模块A，则这个文件名也叫 <code>A.*</code>， <code>import</code> 时候的参数也叫 <code>A</code>。 大小写完全一致。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// file 1 contents</span>\n<span class="token keyword">class</span> <span class="token class-name">CheckBox</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> CheckBox<span class="token punctuation">;</span>\n\n<span class="token comment">// file 2 contents</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">fortyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// file 3 contents</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">insideDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// in some other file</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./checkBox&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/export, camelCase filename</span>\n<span class="token keyword">import</span> FortyTwo <span class="token keyword">from</span> <span class="token string">&#39;./FortyTwo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/filename, camelCase export</span>\n<span class="token keyword">import</span> InsideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./InsideDirectory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/filename, camelCase export</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./check_box&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/export, snake_case filename</span>\n<span class="token keyword">import</span> forty_two <span class="token keyword">from</span> <span class="token string">&#39;./forty_two&#39;</span><span class="token punctuation">;</span> <span class="token comment">// snake_case import/filename, camelCase export</span>\n<span class="token keyword">import</span> inside_directory <span class="token keyword">from</span> <span class="token string">&#39;./inside_directory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// snake_case import, camelCase export</span>\n<span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">&#39;./inside_directory/index&#39;</span><span class="token punctuation">;</span> <span class="token comment">// requiring the index file explicitly</span>\n<span class="token keyword">import</span> insideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./insideDirectory/index&#39;</span><span class="token punctuation">;</span> <span class="token comment">// requiring the index file explicitly</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./CheckBox&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase export/import/filename</span>\n<span class="token keyword">import</span> fortyTwo <span class="token keyword">from</span> <span class="token string">&#39;./fortyTwo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// camelCase export/import/filename</span>\n<span class="token keyword">import</span> insideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./insideDirectory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// camelCase export/import/directory name/implicit &quot;index&quot;</span>\n<span class="token comment">// ^ supports both insideDirectory.js and insideDirectory/index.js</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li></ul><p><a name="23.7"></a><a name="naming--camelCase-default-export"></a></p><ul><li><p><a href="#naming--camelCase-default-export">23.7</a> 当你 export-default 一个函数时，函数名用小驼峰，文件名需要和函数名一致。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeStyleGuide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> makeStyleGuide<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><a name="23.8"></a><a name="naming--PascalCase-singleton"></a></p><ul><li><p><a href="#naming--PascalCase-singleton">23.8</a> 当你 export 一个结构体/类/单例/函数库/对象 时用大驼峰。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> AirbnbStyleGuide <span class="token operator">=</span> <span class="token punctuation">{</span>\n  es6<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> AirbnbStyleGuide<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p><a name="23.9"></a><a name="naming--Acronyms-and-Initialisms"></a></p><ul><li><p><a href="#naming--Acronyms-and-Initialisms">23.9</a> 简称和缩写应该全部大写或全部小写。</p><blockquote><p>为什么？名字都是给人读的，不是为了去适应计算机算法。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> SmsContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/SmsContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> HttpRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> SMSContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/SMSContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> HTTPRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// also good</span>\n<span class="token keyword">const</span> httpRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">import</span> TextMessageContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/TextMessageContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li></ul><p><a name="23.10"></a><a name="naming--uppercase"></a></p><ul><li><p><a href="#naming--uppercase">23.10</a> 你可以用全大写字母设置静态变量，他需要满足三个条件。</p><ol><li>导出变量；</li><li>是 <code>const</code> 定义的， 保证不能被改变；</li><li>这个变量是可信的，他的子属性都是不能被改变的。</li></ol><blockquote><p>为什么？这是一个附加工具，帮助开发者去辨识一个变量是不是不可变的。UPPERCASE_VARIABLES 能让开发者知道他能确信这个变量（以及他的属性）是不会变的。</p></blockquote><ul><li>对于所有的 <code>const</code> 变量呢？ —— 这个是不必要的。大写变量不应该在同一个文件里定义并使用， 它只能用来作为导出变量。</li><li>那导出的对象呢？ —— 大写变量处在 <code>export</code> 的最高级(例如：<code>EXPORTED_OBJECT.key</code>) 并且他包含的所有子属性都是不可变的。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token constant">PRIVATE_VARIABLE</span> <span class="token operator">=</span> <span class="token string">&#39;should not be unnecessarily uppercased within a file&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">THING_TO_BE_CHANGED</span> <span class="token operator">=</span> <span class="token string">&#39;should obviously not be uppercased&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REASSIGNABLE_VARIABLE</span> <span class="token operator">=</span> <span class="token string">&#39;do not use let with uppercase variables&#39;</span><span class="token punctuation">;</span>\n\n\n\n<span class="token comment">// ---</span>\n\n<span class="token comment">// 允许但不够语义化</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> apiKey <span class="token operator">=</span> <span class="token string">&#39;SOMEKEY&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在大多数情况下更好</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">API_KEY</span> <span class="token operator">=</span> <span class="token string">&#39;SOMEKEY&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ---</span>\n\n<span class="token comment">// bad - 不必要的大写键，没有增加任何语义</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MAPPING</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">KEY</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MAPPING</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="get-set-访问器" tabindex="-1"><a class="header-anchor" href="#get-set-访问器" aria-hidden="true">#</a> Get-Set 访问器</h2><p><a name="24.1"></a><a name="accessors--not-required"></a></p><ul><li><a href="#accessors--not-required">24.1</a> 不需要使用属性的访问器函数。</li></ul><p><a name="24.2"></a><a name="accessors--no-getters-setters"></a></p><ul><li><p><a href="#accessors--no-getters-setters">24.2</a> 不要使用 JavaScript 的 getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code> 去创造你自己的访问器函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token punctuation">{</span>\n  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token punctuation">{</span>\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li></ul><p><a name="24.3"></a><a name="accessors--boolean-prefix"></a></p><ul><li><p><a href="#accessors--boolean-prefix">24.3</a> 如果属性/方法是 <code>boolean</code>， 用 <code>isVal()</code> 或 <code>hasVal()</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragon<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragon<span class="token punctuation">.</span><span class="token function">hasAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p><a name="24.4"></a><a name="accessors--consistent"></a></p><ul><li><p><a href="#accessors--consistent">24.4</a> 用 <code>get() </code> 和 <code>set()</code> 函数是可以的，但是要一起用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> lightsaber <span class="token operator">=</span> options<span class="token punctuation">.</span>lightsaber <span class="token operator">||</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;lightsaber&#39;</span><span class="token punctuation">,</span> lightsaber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p><a name="25.1"></a><a name="events--hash"></a></p><ul><li><p><a href="#events--hash">25.1</a> 当传递数据载荷给事件时（不论是 DOM 还是像 Backbone 这样有很多属性的事件）。这使得后续的贡献者（程序员）向这个事件添加更多的数据时不用去找或者更新每个处理器。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> listing<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> listingID</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with listingID</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>prefer:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> listingID<span class="token operator">:</span> listing<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with data.listingID</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery" aria-hidden="true">#</a> jQuery</h2><p><a name="26.1"></a><a name="jquery--dollar-prefix"></a></p><ul><li><p><a href="#jquery--dollar-prefix">26.1</a> jQuery 对象用<code>$</code>变量表示。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> $sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> $sidebarBtn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><a name="26.2"></a><a name="jquery--cache"></a></p><ul><li><p><a href="#jquery--cache">26.2</a> 缓存 jQuery 查找。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">setSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">setSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> $sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $sidebar<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n\n  $sidebar<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul><p><a name="26.3"></a><a name="jquery--queries"></a></p>',31),Xk=(0,p._)("a",{href:"#jquery--queries"},"26.3",-1),Kk=(0,p.Uk)(" DOM 查找用层叠式"),Zk=(0,p._)("code",null,"$('.sidebar ul')",-1),nb=(0,p.Uk)(" 或 父节点 > 子节点 "),sb=(0,p._)("code",null,"$('.sidebar > ul')",-1),ab=(0,p.Uk)(". "),pb={href:"http://jsperf.com/jquery-find-vs-context-sel/16",target:"_blank",rel:"noopener noreferrer"},eb=(0,p.Uk)("jsPerf"),tb=(0,p.uE)('<p><a name="26.4"></a><a name="jquery--find"></a></p><ul><li><p><a href="#jquery--find">26.4</a> 用 jQuery 对象查询作用域的 <code>find</code> 方法查询。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar &gt; ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n$sidebar<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ back to top</a></strong></p>',3),ob={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[t,o,c,l,u,r,(0,p._)("a",i,[k,(0,p.Wm)(a)]),b,(0,p._)("a",m,[d,(0,p.Wm)(a)])]),g])]),f,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[y,h,v,w,_,j,(0,p._)("a",x,[E,(0,p.Wm)(a)])]),U])]),q,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[A,B,(0,p._)("a",S,[W,(0,p.Wm)(a)])]),N])]),D,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[C,O,(0,p._)("a",I,[P,(0,p.Wm)(a)])]),T])]),z,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[F,L,(0,p._)("a",$,[J,(0,p.Wm)(a)])]),G])]),R,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[H,M,V,Q,(0,p._)("a",Y,[X,(0,p.Wm)(a)])]),K])]),Z,(0,p._)("ul",null,[(0,p._)("li",null,[nn,sn,an,pn,(0,p._)("a",en,[tn,(0,p.Wm)(a)]),on,cn,ln,(0,p._)("a",un,[rn,(0,p.Wm)(a)]),kn])]),bn,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[mn,dn,(0,p._)("a",gn,[fn,(0,p.Wm)(a)])]),yn])]),hn,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[vn,wn,(0,p._)("a",_n,[jn,(0,p.Wm)(a)]),xn]),En])]),Un,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[qn,An,Bn,Sn,(0,p._)("a",Wn,[Nn,(0,p.Wm)(a)]),Dn]),Cn])]),On,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[In,Pn,(0,p._)("a",Tn,[zn,(0,p.Wm)(a)]),Fn]),Ln])]),$n,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Jn,Gn,(0,p._)("a",Rn,[Hn,(0,p.Wm)(a)]),Mn,Vn,Qn]),Yn])]),Xn,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Kn,Zn,ns,ss,(0,p._)("a",as,[ps,(0,p.Wm)(a)])]),es])]),ts,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[os,cs,(0,p._)("a",ls,[us,(0,p.Wm)(a)])]),rs])]),is,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ks,bs,(0,p._)("a",ms,[ds,(0,p.Wm)(a)])]),gs])]),fs,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ys,hs,vs,ws,(0,p._)("a",_s,[js,(0,p.Wm)(a)])]),xs])]),Es,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Us,qs,(0,p._)("a",As,[Bs,(0,p.Wm)(a)]),Ss,(0,p._)("a",Ws,[Ns,(0,p.Wm)(a)])]),Ds])]),Cs,(0,p._)("ul",null,[(0,p._)("li",null,[Os,Is,Ps,Ts,(0,p._)("a",zs,[Fs,(0,p.Wm)(a)])])]),Ls,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[$s,Js,(0,p._)("a",Gs,[Rs,(0,p.Wm)(a)])]),Hs])]),Ms,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Vs,Qs,(0,p._)("a",Ys,[Xs,(0,p.Wm)(a)])]),Ks])]),Zs,(0,p._)("ul",null,[(0,p._)("li",null,[na,sa,aa,pa,ea,ta,(0,p._)("a",oa,[ca,(0,p.Wm)(a)])])]),la,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ua,ra,ia,ka,ba,ma,(0,p._)("a",da,[ga,(0,p.Wm)(a)])]),fa])]),ya,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ha,va,(0,p._)("a",wa,[_a,(0,p.Wm)(a)])]),ja])]),xa,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ea,Ua,(0,p._)("a",qa,[Aa,(0,p.Wm)(a)])]),Ba])]),Sa,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Wa,Na,(0,p._)("a",Da,[Ca,(0,p.Wm)(a)]),Oa,(0,p._)("a",Ia,[Pa,(0,p.Wm)(a)])]),Ta])]),za,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Fa,La,(0,p._)("a",$a,[Ja,(0,p.Wm)(a)])]),Ga])]),Ra,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ha,Ma,(0,p._)("a",Va,[Qa,(0,p.Wm)(a)])]),Ya])]),Xa,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ka,Za,(0,p._)("a",np,[sp,(0,p.Wm)(a)])]),ap])]),pp,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ep,tp,(0,p._)("a",op,[cp,(0,p.Wm)(a)]),lp,(0,p._)("a",up,[rp,(0,p.Wm)(a)])]),ip])]),kp,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[bp,mp,(0,p._)("a",dp,[gp,(0,p.Wm)(a)]),fp,yp,hp,(0,p._)("a",vp,[wp,(0,p.Wm)(a)]),_p,(0,p._)("a",jp,[xp,(0,p.Wm)(a)])]),Ep])]),Up,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[qp,Ap,(0,p._)("a",Bp,[Sp,(0,p.Wm)(a)])]),Wp])]),Np,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Dp,Cp,Op,Ip,Pp,Tp,zp,Fp,(0,p._)("a",Lp,[$p,(0,p.Wm)(a)])]),Jp])]),Gp,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Rp,Hp,(0,p._)("a",Mp,[Vp,(0,p.Wm)(a)])]),Qp])]),Yp,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Xp,Kp,(0,p._)("a",Zp,[ne,(0,p.Wm)(a)])]),se])]),ae,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[pe,ee,(0,p._)("a",te,[oe,(0,p.Wm)(a)])]),ce])]),le,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ue,re,ie,ke,(0,p._)("a",be,[me,(0,p.Wm)(a)])]),de])]),ge,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[fe,ye,he,ve,(0,p._)("a",we,[_e,(0,p.Wm)(a)])]),je])]),xe,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ee,Ue,(0,p._)("a",qe,[Ae,(0,p.Wm)(a)])]),Be])]),Se,(0,p._)("ul",null,[(0,p._)("li",null,[We,Ne,De,Ce,(0,p._)("a",Oe,[Ie,(0,p.Wm)(a)])])]),Pe,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Te,ze,Fe,Le,(0,p._)("a",$e,[Je,(0,p.Wm)(a)])]),Ge])]),Re,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[He,Me,Ve,Qe,(0,p._)("a",Ye,[Xe,(0,p.Wm)(a)])]),Ke])]),Ze,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[nt,st,at,pt,et,tt,(0,p._)("a",ot,[ct,(0,p.Wm)(a)]),lt,(0,p._)("a",ut,[rt,(0,p.Wm)(a)])]),it])]),kt,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[bt,mt,dt,gt,(0,p._)("a",ft,[yt,(0,p.Wm)(a)])]),ht])]),vt,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[wt,_t,(0,p._)("a",jt,[xt,(0,p.Wm)(a)])]),Et])]),Ut,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[qt,At,Bt,St,(0,p._)("a",Wt,[Nt,(0,p.Wm)(a)]),Dt]),Ct])]),Ot,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[It,Pt,Tt,zt,Ft,Lt,(0,p._)("a",$t,[Jt,(0,p.Wm)(a)]),Gt,(0,p._)("a",Rt,[Ht,(0,p.Wm)(a)])]),Mt])]),Vt,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Qt,Yt,Xt,Kt,Zt,no,(0,p._)("a",so,[ao,(0,p.Wm)(a)])]),po])]),eo,(0,p._)("ul",null,[to,(0,p._)("li",null,[(0,p._)("p",null,[oo,co,(0,p._)("a",lo,[uo,(0,p.Wm)(a)])]),ro])]),io,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ko,bo,mo,go,fo,yo,(0,p._)("a",ho,[vo,(0,p.Wm)(a)])]),wo])]),_o,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[jo,xo,Eo,Uo,(0,p._)("a",qo,[Ao,(0,p.Wm)(a)]),Bo,(0,p._)("a",So,[Wo,(0,p.Wm)(a)]),No]),Do])]),Co,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Oo,Io,(0,p._)("a",Po,[To,(0,p.Wm)(a)])]),zo])]),Fo,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Lo,$o,Jo,Go,Ro,Ho,Mo,Vo,(0,p._)("a",Qo,[Yo,(0,p.Wm)(a)]),Xo,(0,p._)("a",Ko,[Zo,(0,p.Wm)(a)]),nc]),sc])]),ac,(0,p._)("ul",null,[pc,(0,p._)("li",null,[(0,p._)("p",null,[ec,(0,p._)("a",tc,[oc,(0,p.Wm)(a)]),cc,(0,p._)("a",lc,[uc,(0,p.Wm)(a)]),rc])])]),ic,(0,p._)("ul",null,[(0,p._)("li",null,[kc,bc,mc,dc,gc,fc,yc,hc,vc,wc,(0,p._)("a",_c,[jc,(0,p.Wm)(a)])])]),xc,(0,p._)("ul",null,[(0,p._)("li",null,[Ec,Uc,(0,p._)("a",qc,[Ac,(0,p.Wm)(a)]),Bc])]),Sc,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Wc,(0,p._)("a",Nc,[Dc,(0,p.Wm)(a)]),Cc]),Oc])]),Ic,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Pc,Tc,(0,p._)("a",zc,[Fc,(0,p.Wm)(a)])]),Lc])]),$c,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Jc,Gc,(0,p._)("a",Rc,[Hc,(0,p.Wm)(a)])]),Mc])]),Vc,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Qc,Yc,Xc,Kc,Zc,nl,sl,al,pl,el,(0,p._)("a",tl,[ol,(0,p.Wm)(a)])]),cl])]),ll,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ul,rl,(0,p._)("a",il,[kl,(0,p.Wm)(a)])]),bl])]),ml,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[dl,gl,fl,yl,hl,vl,wl,_l,(0,p._)("a",jl,[xl,(0,p.Wm)(a)])]),El])]),Ul,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ql,(0,p._)("a",Al,[Bl,(0,p.Wm)(a)])]),Sl])]),Wl,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Nl,Dl,(0,p._)("a",Cl,[Ol,(0,p.Wm)(a)])]),Il])]),Pl,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Tl,zl,(0,p._)("a",Fl,[Ll,(0,p.Wm)(a)])]),$l])]),Jl,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Gl,Rl,(0,p._)("a",Hl,[Ml,(0,p.Wm)(a)])]),Vl])]),Ql,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Yl,Xl,Kl,Zl,nu,su,(0,p._)("a",au,[pu,(0,p.Wm)(a)])]),eu])]),tu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ou,cu,(0,p._)("a",lu,[uu,(0,p.Wm)(a)])]),ru])]),iu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ku,bu,(0,p._)("a",mu,[du,(0,p.Wm)(a)])]),gu])]),fu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[yu,hu,(0,p._)("a",vu,[wu,(0,p.Wm)(a)]),_u,(0,p._)("a",ju,[xu,(0,p.Wm)(a)])]),Eu])]),Uu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[qu,Au,(0,p._)("a",Bu,[Su,(0,p.Wm)(a)])]),Wu])]),Nu,(0,p._)("ul",null,[(0,p._)("li",null,[Du,Cu,(0,p._)("a",Ou,[Iu,(0,p.Wm)(a)])])]),Pu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Tu,zu,(0,p._)("a",Fu,[Lu,(0,p.Wm)(a)])]),$u])]),Ju,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Gu,Ru,(0,p._)("a",Hu,[Mu,(0,p.Wm)(a)])]),Vu])]),Qu,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Yu,Xu,(0,p._)("a",Ku,[Zu,(0,p.Wm)(a)])]),nr])]),sr,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ar,pr,er,tr,(0,p._)("a",or,[cr,(0,p.Wm)(a)])]),lr])]),ur,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[rr,ir,kr,br,mr,dr,(0,p._)("a",gr,[fr,(0,p.Wm)(a)])]),yr])]),hr,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[vr,wr,_r,jr,xr,Er,(0,p._)("a",Ur,[qr,(0,p.Wm)(a)])]),Ar])]),Br,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Sr,Wr,(0,p._)("a",Nr,[Dr,(0,p.Wm)(a)])]),Cr])]),Or,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ir,Pr,(0,p._)("a",Tr,[zr,(0,p.Wm)(a)])]),Fr])]),Lr,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[$r,Jr,Gr,Rr,Hr,Mr,(0,p._)("a",Vr,[Qr,(0,p.Wm)(a)])]),Yr])]),Xr,(0,p._)("ul",null,[(0,p._)("li",null,[Kr,Zr,(0,p._)("a",ni,[si,(0,p.Wm)(a)])])]),ai,(0,p._)("ul",null,[(0,p._)("li",null,[pi,ei,(0,p._)("a",ti,[oi,(0,p.Wm)(a)])])]),ci,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[li,ui,(0,p._)("a",ri,[ii,(0,p.Wm)(a)])]),ki])]),bi,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[mi,di,gi,fi,(0,p._)("a",yi,[hi,(0,p.Wm)(a)])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[vi,(0,p._)("a",wi,[_i,(0,p.Wm)(a)]),ji])]),xi])]),Ei,Ui,qi,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ai,Bi,Si,Wi,(0,p._)("a",Ni,[Di,(0,p.Wm)(a)])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[Ci,(0,p._)("a",Oi,[Ii,(0,p.Wm)(a)]),Pi])])])]),Ti,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[zi,Fi,(0,p._)("a",Li,[$i,(0,p.Wm)(a)])]),Ji])]),Gi,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ri,Hi,Mi,Vi,Qi,Yi,Xi,Ki,(0,p._)("a",Zi,[nk,(0,p.Wm)(a)])]),sk])]),ak,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[pk,ek,tk,ok,(0,p._)("a",ck,[lk,(0,p.Wm)(a)]),uk,(0,p._)("a",rk,[ik,(0,p.Wm)(a)]),kk,(0,p._)("a",bk,[mk,(0,p.Wm)(a)]),dk]),gk])]),fk,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[yk,hk,(0,p._)("a",vk,[wk,(0,p.Wm)(a)])]),_k])]),jk,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[xk,Ek,(0,p._)("a",Uk,[qk,(0,p.Wm)(a)])]),Ak])]),Bk,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Sk,Wk,(0,p._)("a",Nk,[Dk,(0,p.Wm)(a)])]),Ck])]),Ok,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ik,Pk,(0,p._)("a",Tk,[zk,(0,p.Wm)(a)])]),Fk])]),Lk,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[$k,Jk,Gk,Rk,(0,p._)("a",Hk,[Mk,(0,p.Wm)(a)]),Vk]),Qk])]),Yk,(0,p._)("ul",null,[(0,p._)("li",null,[Xk,Kk,Zk,nb,sb,ab,(0,p._)("a",pb,[eb,(0,p.Wm)(a)])])]),tb],64)}}}}]);