"use strict";(self.webpackChunkweb_code_norm=self.webpackChunkweb_code_norm||[]).push([[783],{760:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-9c5e631a",path:"/react.html",title:"React/JSX 风格指南",lang:"en-US",frontmatter:{title:"React/JSX 风格指南"},excerpt:"",headers:[{level:2,title:"目录",slug:"目录",children:[]},{level:2,title:"Basic Rules",slug:"basic-rules",children:[]},{level:2,title:"Class vs React.createClass vs stateless",slug:"class-vs-react-createclass-vs-stateless",children:[]},{level:2,title:"Mixins",slug:"mixins",children:[]},{level:2,title:"Naming",slug:"naming",children:[]},{level:2,title:"Declaration",slug:"declaration",children:[]},{level:2,title:"Alignment",slug:"alignment",children:[]},{level:2,title:"Quotes",slug:"quotes",children:[]},{level:2,title:"Spacing",slug:"spacing",children:[]},{level:2,title:"Props",slug:"props",children:[]},{level:2,title:"Refs",slug:"refs",children:[]},{level:2,title:"Parentheses",slug:"parentheses",children:[]},{level:2,title:"Tags",slug:"tags",children:[]},{level:2,title:"Methods",slug:"methods",children:[]},{level:2,title:"Ordering",slug:"ordering",children:[]},{level:2,title:"isMounted",slug:"ismounted",children:[]}],filePathRelative:"react.md",git:{updatedTime:1631526937e3,contributors:[{name:"superyun",email:"11297923@qq.com",commits:1}]}}},464:(n,s,a)=>{a.r(s),a.d(s,{default:()=>ka});var p=a(252);const t=(0,p.uE)('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><ol><li><a href="#basic-rules">基本规则(Basic Rules)</a></li><li><a href="#class-vs-reactcreateclass-vs-stateless">Class vs <code>React.createClass</code> vs stateless</a></li><li><a href="#mixins">混合(Mixins)</a></li><li><a href="#naming">命名(Naming)</a></li><li><a href="#declaration">声明(Declaration)</a></li><li><a href="#alignment">对齐(Alignment)</a></li><li><a href="#quotes">引号(Quotes)</a></li><li><a href="#spacing">空格(Spacing)</a></li><li><a href="#props">属性(Props)</a></li><li><a href="#refs">引用(Refs)</a></li><li><a href="#parentheses">括号(Parentheses)</a></li><li><a href="#tags">标签(Tags)</a></li><li><a href="#methods">方法(Methods)</a></li><li><a href="#ordering">排序(Ordering)</a></li><li><a href="#ismounted"><code>isMounted</code></a></li></ol><h2 id="basic-rules" tabindex="-1"><a class="header-anchor" href="#basic-rules" aria-hidden="true">#</a> Basic Rules</h2>',3),e=(0,p.Uk)("每个文件只包含一个 React 组件 "),o=(0,p.Uk)("然而，在一个文件里包含多个"),l={href:"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("没有 state 或纯组件"),u=(0,p.Uk)("是允许的。 eslint: "),r={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless",target:"_blank",rel:"noopener noreferrer"},i=(0,p._)("code",null,"react/no-multi-comp",-1),k=(0,p.Uk)("."),b=(0,p._)("li",null,"经常用 JSX 语法。",-1),m=(0,p._)("li",null,[(0,p.Uk)("不要用 "),(0,p._)("code",null,"React.createElement"),(0,p.Uk)("， 除非你从一个非 JSX 文件中初始化 app。")],-1),d=(0,p._)("h2",{id:"class-vs-react-createclass-vs-stateless",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#class-vs-react-createclass-vs-stateless","aria-hidden":"true"},"#"),(0,p.Uk)(" Class vs "),(0,p._)("code",null,"React.createClass"),(0,p.Uk)(" vs stateless")],-1),g=(0,p.Uk)("如果你要用 state refs， 最好用 "),h=(0,p._)("code",null,"class extends React.Component",-1),v=(0,p.Uk)(" 而不是 "),f=(0,p._)("code",null,"React.createClass",-1),x=(0,p.Uk)(". eslint: "),y={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md",target:"_blank",rel:"noopener noreferrer"},_=(0,p._)("code",null,"react/prefer-es6-class",-1),q=(0,p.Uk)(),j={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md",target:"_blank",rel:"noopener noreferrer"},w=(0,p._)("code",null,"react/prefer-stateless-function",-1),C=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> Listing <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Listing</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hello<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>如果你没有使用 state、 refs ，最好用正常函数(不是箭头函数)而不是 class：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Listing</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>hello<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad (不鼓励依赖函数名推断————relying on function name inference is discouraged)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Listing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> hello <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>hello<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">Listing</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> hello <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>hello<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',3),U=(0,p._)("h2",{id:"mixins",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#mixins","aria-hidden":"true"},"#"),(0,p.Uk)(" Mixins")],-1),W={href:"https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html",target:"_blank",rel:"noopener noreferrer"},R=(0,p.Uk)("不要用 mixins"),F=(0,p.Uk)("."),P=(0,p.Uk)("Why? mixins 会引入一些隐含依赖，导致命名冲突，会导致滚雪球式的复杂度。大多数情况下，mixins 都可以通过组件，"),E={href:"https://reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"},T=(0,p.Uk)("高阶组件 HOC"),M=(0,p.Uk)("或者工具模块更好的实现。"),S=(0,p._)("h2",{id:"naming",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#naming","aria-hidden":"true"},"#"),(0,p.Uk)(" Naming")],-1),D=(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("strong",null,"扩展名"),(0,p.Uk)(": 用 "),(0,p._)("code",null,".jsx"),(0,p.Uk)(" 作为组件扩展名。")])],-1),L=(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("strong",null,"文件名"),(0,p.Uk)(": 用大驼峰作为文件名，如："),(0,p._)("code",null,"ReservationCard.jsx"),(0,p.Uk)("。")])],-1),N=(0,p._)("strong",null,"参数命名",-1),B=(0,p.Uk)(": React 组件用大驼峰，组件的实例用小驼峰。 eslint: "),A={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md",target:"_blank",rel:"noopener noreferrer"},H=(0,p._)("code",null,"react/jsx-pascal-case",-1),I=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> reservationCard <span class="token keyword">from</span> <span class="token string">&#39;./ReservationCard&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> ReservationCard <span class="token keyword">from</span> <span class="token string">&#39;./ReservationCard&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> ReservationItem <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReservationCard</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> reservationItem <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReservationCard</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),O=(0,p.uE)('<li><p><strong>组件命名</strong>: 文件名作为组件名。例如：<code>ReservationCard.jsx</code> 应该用 <code>ReservationCard</code> 作为参数名。 然而，对于一个文件夹里的跟组件，应该用 <code>index.jsx</code> 作为文件名，同时用文件夹名作为组件名</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer/Footer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer/index&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><strong>高阶组件<code>HOC</code>命名</strong>: 用高阶组件名和传入的组件名组合作为生成的组件的 <code>displayName</code>。 举个例子，一个高阶组件 <code>withFoo()</code>， 当传入一个组件 <code>Bar</code> 应该生成一个新的组件，他的 <code>displayName</code> 属性是 <code>withFoo(Bar)</code>。</p><blockquote><p>Why? 组件的 <code>displayName</code> 可以用于开发者工具或者错误信息中，同时还有一个值可以清晰的表达这种组件关系，这可以帮助人们理解到底发生了什么</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">withFoo</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">WithFoo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">foo</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">withFoo</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">WithFoo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">foo</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> wrappedComponentName <span class="token operator">=</span> WrappedComponent<span class="token punctuation">.</span>displayName\n    <span class="token operator">||</span> WrappedComponent<span class="token punctuation">.</span>name\n    <span class="token operator">||</span> <span class="token string">&#39;Component&#39;</span><span class="token punctuation">;</span>\n\n  WithFoo<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">withFoo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wrappedComponentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> WithFoo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p><strong>Props 命名</strong>: 避免用 DOM 组件的属性名表达不同的意义</p><blockquote><p>Why? 人们期望 <code>style</code>、 <code>className</code> 这种属性代表一个明确的意义。 为应用程序的一个子集改变此API会使代码的可读性降低，维护性降低，并可能导致错误。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css">fancy</span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fancy<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fancy<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li>',3),J=(0,p.uE)('<h2 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration" aria-hidden="true">#</a> Declaration</h2><ul><li><p>不要通过 <code>displayName</code> 命名组件。最好通过引用命名组件。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  displayName<span class="token operator">:</span> <span class="token string">&#39;ReservationCard&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// stuff goes here</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ReservationCard</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><h2 id="alignment" tabindex="-1"><a class="header-anchor" href="#alignment" aria-hidden="true">#</a> Alignment</h2>',3),z=(0,p.Uk)("对 JSX 语法使用这些对齐风格。 eslint: "),X={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md",target:"_blank",rel:"noopener noreferrer"},Q=(0,p._)("code",null,"react/jsx-closing-bracket-location",-1),K=(0,p.Uk)(),Y={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md",target:"_blank",rel:"noopener noreferrer"},$=(0,p._)("code",null,"react/jsx-closing-tag-location",-1),G=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span>\n     <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// 如果能放在一行，也可以用单行表示</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// Foo 里面的标签正常缩进</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">superLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">anotherSuperLongParam</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Quux</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Foo</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">{</span>\n  showButton <span class="token operator">&amp;&amp;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>showButton <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>',1),V=(0,p._)("h2",{id:"quotes",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#quotes","aria-hidden":"true"},"#"),(0,p.Uk)(" Quotes")],-1),Z=(0,p.Uk)("在 JSX 属性中用双引号("),nn=(0,p._)("code",null,'"',-1),sn=(0,p.Uk)(")，但是在js里用单引号("),an=(0,p._)("code",null,"'",-1),pn=(0,p.Uk)(")。eslint: "),tn={href:"https://eslint.org/docs/rules/jsx-quotes",target:"_blank",rel:"noopener noreferrer"},en=(0,p._)("code",null,"jsx-quotes",-1),on=(0,p.uE)('<blockquote><p>Why? 正常的 HTML 属性也通常使用双引号而不是单引号，所以 JSX 属性也使用这个约定。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>bar<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token string">&quot;20px&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token operator">:</span> <span class="token string">&#39;20px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',2),ln=(0,p._)("h2",{id:"spacing",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#spacing","aria-hidden":"true"},"#"),(0,p.Uk)(" Spacing")],-1),cn=(0,p.Uk)("在自闭和标签内空一格。 eslint: "),un={href:"https://eslint.org/docs/rules/no-multi-spaces",target:"_blank",rel:"noopener noreferrer"},rn=(0,p._)("code",null,"no-multi-spaces",-1),kn=(0,p.Uk)(", "),bn={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md",target:"_blank",rel:"noopener noreferrer"},mn=(0,p._)("code",null,"react/jsx-tag-spacing",-1),dn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// very bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>                 <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),gn=(0,p.Uk)("JSX 里的大括号不要空格。 eslint: "),hn={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md",target:"_blank",rel:"noopener noreferrer"},vn=(0,p._)("code",null,"react/jsx-curly-spacing",-1),fn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> baz <span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">bar</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>baz<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),xn=(0,p._)("h2",{id:"props",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#props","aria-hidden":"true"},"#"),(0,p.Uk)(" Props")],-1),yn=(0,p.uE)('<li><p>props 用小驼峰</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">UserName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">phone_number</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12345678</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">userName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">phoneNumber</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12345678</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li>',1),_n=(0,p.Uk)("如果 prop 的值是 true 可以忽略这个值，直接写 prop 名就可以。 eslint: "),qn={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md",target:"_blank",rel:"noopener noreferrer"},jn=(0,p._)("code",null,"react/jsx-boolean-value",-1),wn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">hidden</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">hidden</span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">hidden</span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',1),Cn=(0,p._)("code",null,"<img>",-1),Un=(0,p.Uk)(" 标签通常会设置 "),Wn=(0,p._)("code",null,"alt",-1),Rn=(0,p.Uk)(" 属性。如果图片是表现型的， "),Fn=(0,p._)("code",null,"alt",-1),Pn=(0,p.Uk)("可以是空字符串或者 "),En=(0,p._)("code",null,"<img>",-1),Tn=(0,p.Uk)(" 必须有 "),Mn=(0,p._)("code",null,'role="presentation"',-1),Sn=(0,p.Uk)(" 这个属性。 eslint: "),Dn={href:"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/alt-text.md",target:"_blank",rel:"noopener noreferrer"},Ln=(0,p._)("code",null,"jsx-a11y/alt-text",-1),Nn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Me waving hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>presentation<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',1),Bn=(0,p.Uk)("不要在 "),An=(0,p._)("code",null,"<img>",-1),Hn=(0,p.Uk)(" 的 "),In=(0,p._)("code",null,"alt",-1),On=(0,p.Uk)(' 属性里用类似 "image"， "photo"， "picture" 这些单词。 eslint: '),Jn={href:"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md",target:"_blank",rel:"noopener noreferrer"},zn=(0,p._)("code",null,"jsx-a11y/img-redundant-alt",-1),Xn=(0,p.uE)('<blockquote><p>Why? 因为屏幕阅读器已经将 <code>img</code> 发音为图片了，所以这个信息就不需要出现在 alt 文本里了。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Picture of me waving hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Me waving hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),Qn=(0,p.Uk)("只用可用的，不抽象的 "),Kn={href:"https://www.w3.org/TR/wai-aria/#usage_intro",target:"_blank",rel:"noopener noreferrer"},Yn=(0,p.Uk)("ARIA roles"),$n=(0,p.Uk)(". eslint: "),Gn={href:"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md",target:"_blank",rel:"noopener noreferrer"},Vn=(0,p._)("code",null,"jsx-a11y/aria-role",-1),Zn=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad - 不是一个 ARIA role</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>datepicker<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// bad - 抽象的 ARIA role</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>range<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),ns=(0,p.Uk)("不要在元素上用 "),ss=(0,p._)("code",null,"accessKey",-1),as=(0,p.Uk)("。 eslint: "),ps={href:"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md",target:"_blank",rel:"noopener noreferrer"},ts=(0,p._)("code",null,"jsx-a11y/no-access-key",-1),es=(0,p.uE)('<blockquote><p>Why? 使用屏幕阅读器和键盘的人使用的键盘快捷键和键盘命令之间的不一致使得可访问性变得复杂。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">accessKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>避免用数组下标作为 <code>key</code> 属性，推荐用稳定的 ID</li></ul>',3),os=(0,p.Uk)("Why? 不使用稳定杆的 ID "),ls={href:"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318",target:"_blank",rel:"noopener noreferrer"},cs=(0,p.Uk)("is an anti-pattern"),us=(0,p.Uk)(" 会对组件性能产生消极影响，并且组件状态容易出现问题。 如果数组元素可能会发生变化，我们不推荐使用下标作为key。"),rs=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span></span>\n    <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span></span>\n    <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span></span>\n    <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span></span>\n    <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>对于所有非必须属性，定义一个明确的默认值。</li></ul><blockquote><p>Why? propTypes 是一个文档形式，同时提供默认属性意味着使用者不需要假定那么多值。另外，这也意味着你的代码可以忽略类型检查。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token constant">SFC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>node<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token constant">SFC</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>node<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token constant">SFC</span><span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  bar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>少用props扩展运算符，既 <code>{...props}</code></li></ul>',5),is=(0,p.Uk)("Why? 除非你更喜欢把不需要的props属性传入组件。而且对于 v15.6.1 及更早以前的 React， 你只能"),ks={href:"https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html",target:"_blank",rel:"noopener noreferrer"},bs=(0,p.Uk)("给DOM元素传非HTML属性的props"),ms=(0,p.Uk)("。"),ds=(0,p.uE)('<p>例外：</p><ul><li>HOC 是代理 props 并且提成了propTypes</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    Proxy<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n      text<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n      isLoading<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>bool\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>扩展一个已知的，有明确属性的对象也是可以的。这个对用 Mocha 的 beforeEach 函数做单测时尤其有用。</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> Foo <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>\n    text<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    isPublished<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),gs=(0,p.Uk)("使用说明： 尽可能过滤出不需要的属性。同时用"),hs={href:"https://www.npmjs.com/package/prop-types-exact",target:"_blank",rel:"noopener noreferrer"},vs=(0,p.Uk)("prop-type-exact"),fs=(0,p.Uk)("去帮助避免bug。"),xs=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> irrelevantProp<span class="token punctuation">,</span> <span class="token operator">...</span>relevantProps  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> irrelevantProp<span class="token punctuation">,</span> <span class="token operator">...</span>relevantProps  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>relevantProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>',2),ys=(0,p.Uk)("推荐用 ref callback 函数。 eslint: "),_s={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md",target:"_blank",rel:"noopener noreferrer"},qs=(0,p._)("code",null,"react/no-string-refs",-1),js=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myRef<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> ref<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),ws=(0,p._)("h2",{id:"parentheses",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#parentheses","aria-hidden":"true"},"#"),(0,p.Uk)(" Parentheses")],-1),Cs=(0,p.Uk)("当 JSX 标签有多行时，用圆括号包起来。eslint: "),Us={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md",target:"_blank",rel:"noopener noreferrer"},Ws=(0,p._)("code",null,"react/jsx-wrap-multilines",-1),Rs=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>long body<span class="token punctuation">&quot;</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n           </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyChild</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>long body<span class="token punctuation">&quot;</span></span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyChild</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good, 单行可以直接写</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>body<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',1),Fs=(0,p._)("h2",{id:"tags",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#tags","aria-hidden":"true"},"#"),(0,p.Uk)(" Tags")],-1),Ps=(0,p.Uk)("当没有子元素时，最好用自闭合标签。 eslint: "),Es={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md",target:"_blank",rel:"noopener noreferrer"},Ts=(0,p._)("code",null,"react/self-closing-comp",-1),Ms=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Foo</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuff<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Ss=(0,p.Uk)("如果你的组件有多行属性，用他的闭合标签单独作为结束行。 eslint: "),Ds={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md",target:"_blank",rel:"noopener noreferrer"},Ls=(0,p._)("code",null,"react/jsx-closing-bracket-location",-1),Ns=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// good</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span></span>\n  <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',1),Bs=(0,p._)("h2",{id:"methods",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),(0,p.Uk)(" Methods")],-1),As=(0,p.uE)('<li><p>用箭头函数关闭局部变量。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">ItemList</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span>\n          <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">doSomethingWith</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li>',1),Hs=(0,p.Uk)("在构造函数里绑定事件处理函数。 eslint: "),Is={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md",target:"_blank",rel:"noopener noreferrer"},Os=(0,p._)("code",null,"react/jsx-no-bind",-1),Js=(0,p.uE)('<blockquote><p>Why? render 函数中的绑定调用在每次 render 的时候都会创建一个新的函数。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">onClickDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClickDiv</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>onClickDiv <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClickDiv</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">onClickDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClickDiv<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',2),zs=(0,p.uE)('<li><p>不要在 React 组件里使用下划线作为内部方法名前缀。</p><blockquote><p>Why? 下划线前缀有时候在其他语言里被用于表示私有。但是 JavaScript 原生并不支持私有，所有东西都是公有的。尽管在你的意图里，对你的属性添加下划线前缀不是真的是他变成私有属性，而且任何属性（不论是不是下划线前缀）都被认为是公有的。</p></blockquote><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\nReact<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">_onClickSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// other stuff</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">onClickSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do stuff</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// other stuff</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li>',1),Xs=(0,p.Uk)("确保你的 "),Qs=(0,p._)("code",null,"render",-1),Ks=(0,p.Uk)(" 函数有返回值。 eslint: "),Ys={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md",target:"_blank",rel:"noopener noreferrer"},$s=(0,p._)("code",null,"react/require-render-return",-1),Gs=(0,p.uE)('<div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// bad</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),Vs=(0,p.uE)('<h2 id="ordering" tabindex="-1"><a class="header-anchor" href="#ordering" aria-hidden="true">#</a> Ordering</h2><ul><li><code>class extends React.Component</code> 内部属性的顺序：</li></ul><ol><li>可选的 <code>static</code> 方法</li><li><code>constructor</code></li><li><code>getChildContext</code></li><li><code>componentWillMount</code></li><li><code>componentDidMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li><li><code>componentDidUpdate</code></li><li><code>componentWillUnmount</code></li><li><em>clickHandlers or eventHandlers</em> 如： <code>onClickSubmit()</code>、 <code>onChangeDescription()</code></li><li><em>getter methods for <code>render</code></em> 如： <code>getSelectReason()</code>、 <code>getFooterContent()</code></li><li><em>optional render methods</em> 如： <code>renderNavigation()</code>、 <code>renderProfilePicture()</code></li><li><code>render</code></li></ol>',3),Zs=(0,p.uE)('<li><p>如何定义 <code>propTypes</code>、 <code>defaultProps</code>、 <code>contextTypes</code> 等...</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  url<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  text<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Link</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">methodsAreOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span> <span class="token attr-name">data-id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nLink<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> propTypes<span class="token punctuation">;</span>\nLink<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> defaultProps<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Link<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li>',1),na=(0,p._)("code",null,"React.createClass",-1),sa=(0,p.Uk)(" 内部属性排序： eslint: "),aa={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md",target:"_blank",rel:"noopener noreferrer"},pa=(0,p._)("code",null,"react/sort-comp",-1),ta=(0,p.uE)('<ol><li><code>displayName</code></li><li><code>propTypes</code></li><li><code>contextTypes</code></li><li><code>childContextTypes</code></li><li><code>mixins</code></li><li><code>statics</code></li><li><code>defaultProps</code></li><li><code>getDefaultProps</code></li><li><code>getInitialState</code></li><li><code>getChildContext</code></li><li><code>componentWillMount</code></li><li><code>componentDidMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li><li><code>componentDidUpdate</code></li><li><code>componentWillUnmount</code></li><li><em>clickHandlers or eventHandlers</em> 如： <code>onClickSubmit()</code>、 <code>onChangeDescription()</code></li><li><em>getter methods for <code>render</code></em> 如： <code>getSelectReason()</code>、 <code>getFooterContent()</code></li><li><em>optional render methods</em> 如： <code>renderNavigation()</code>、 <code>renderProfilePicture()</code></li><li><code>render</code></li></ol><h2 id="ismounted" tabindex="-1"><a class="header-anchor" href="#ismounted" aria-hidden="true">#</a> <code>isMounted</code></h2>',2),ea=(0,p.Uk)("不要用 "),oa=(0,p._)("code",null,"isMounted",-1),la=(0,p.Uk)("。 eslint: "),ca={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md",target:"_blank",rel:"noopener noreferrer"},ua=(0,p._)("code",null,"react/no-is-mounted",-1),ra=(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p.Uk)("Why? ["),(0,p._)("code",null,"isMounted"),(0,p.Uk)(" 是反模式][anti-pattern]， 这个在 ES6 class 里不允许的，而且即将被官方废弃。")])],-1),ia=(0,p._)("p",null,[(0,p._)("strong",null,[(0,p._)("a",{href:"#%E7%9B%AE%E5%BD%95"},"⬆ back to top")])],-1),ka={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("ul",null,[(0,p._)("li",null,[e,(0,p._)("ul",null,[(0,p._)("li",null,[o,(0,p._)("a",l,[c,(0,p.Wm)(a)]),u,(0,p._)("a",r,[i,(0,p.Wm)(a)]),k])])]),b,m]),d,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[g,h,v,f,x,(0,p._)("a",y,[_,(0,p.Wm)(a)]),q,(0,p._)("a",j,[w,(0,p.Wm)(a)])]),C])]),U,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",W,[R,(0,p.Wm)(a)]),F])]),(0,p._)("blockquote",null,[(0,p._)("p",null,[P,(0,p._)("a",E,[T,(0,p.Wm)(a)]),M])]),S,(0,p._)("ul",null,[D,L,(0,p._)("li",null,[(0,p._)("p",null,[N,B,(0,p._)("a",A,[H,(0,p.Wm)(a)])]),I]),O]),J,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[z,(0,p._)("a",X,[Q,(0,p.Wm)(a)]),K,(0,p._)("a",Y,[$,(0,p.Wm)(a)])]),G])]),V,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Z,nn,sn,an,pn,(0,p._)("a",tn,[en,(0,p.Wm)(a)])]),on])]),ln,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[cn,(0,p._)("a",un,[rn,(0,p.Wm)(a)]),kn,(0,p._)("a",bn,[mn,(0,p.Wm)(a)])]),dn]),(0,p._)("li",null,[(0,p._)("p",null,[gn,(0,p._)("a",hn,[vn,(0,p.Wm)(a)])]),fn])]),xn,(0,p._)("ul",null,[yn,(0,p._)("li",null,[(0,p._)("p",null,[_n,(0,p._)("a",qn,[jn,(0,p.Wm)(a)])]),wn]),(0,p._)("li",null,[(0,p._)("p",null,[Cn,Un,Wn,Rn,Fn,Pn,En,Tn,Mn,Sn,(0,p._)("a",Dn,[Ln,(0,p.Wm)(a)])]),Nn]),(0,p._)("li",null,[(0,p._)("p",null,[Bn,An,Hn,In,On,(0,p._)("a",Jn,[zn,(0,p.Wm)(a)])]),Xn]),(0,p._)("li",null,[(0,p._)("p",null,[Qn,(0,p._)("a",Kn,[Yn,(0,p.Wm)(a)]),$n,(0,p._)("a",Gn,[Vn,(0,p.Wm)(a)])]),Zn]),(0,p._)("li",null,[(0,p._)("p",null,[ns,ss,as,(0,p._)("a",ps,[ts,(0,p.Wm)(a)])])])]),es,(0,p._)("blockquote",null,[(0,p._)("p",null,[os,(0,p._)("a",ls,[cs,(0,p.Wm)(a)]),us])]),rs,(0,p._)("blockquote",null,[(0,p._)("p",null,[is,(0,p._)("a",ks,[bs,(0,p.Wm)(a)]),ms])]),ds,(0,p._)("p",null,[gs,(0,p._)("a",hs,[vs,(0,p.Wm)(a)]),fs]),xs,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[ys,(0,p._)("a",_s,[qs,(0,p.Wm)(a)])]),js])]),ws,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Cs,(0,p._)("a",Us,[Ws,(0,p.Wm)(a)])]),Rs])]),Fs,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[Ps,(0,p._)("a",Es,[Ts,(0,p.Wm)(a)])]),Ms]),(0,p._)("li",null,[(0,p._)("p",null,[Ss,(0,p._)("a",Ds,[Ls,(0,p.Wm)(a)])]),Ns])]),Bs,(0,p._)("ul",null,[As,(0,p._)("li",null,[(0,p._)("p",null,[Hs,(0,p._)("a",Is,[Os,(0,p.Wm)(a)])]),Js]),zs,(0,p._)("li",null,[(0,p._)("p",null,[Xs,Qs,Ks,(0,p._)("a",Ys,[$s,(0,p.Wm)(a)])]),Gs])]),Vs,(0,p._)("ul",null,[Zs,(0,p._)("li",null,[(0,p._)("p",null,[na,sa,(0,p._)("a",aa,[pa,(0,p.Wm)(a)])])])]),ta,(0,p._)("ul",null,[(0,p._)("li",null,[ea,oa,la,(0,p._)("a",ca,[ua,(0,p.Wm)(a)])])]),ra,ia],64)}}}}]);